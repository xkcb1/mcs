[
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.base",
        "description": "lib.base",
        "isExtraImport": true,
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "os,sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.sys",
        "description": "os.sys",
        "detail": "os.sys",
        "documentation": {}
    },
    {
        "label": "PyQt5.QtGui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QEnterEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QEnterEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QEnterEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItemModel",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QStandardItem",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QFont",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QEnterEvent",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QPixmap",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QColor",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QGuiApplication",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "PyQt5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5",
        "description": "PyQt5",
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "PyQt5.QtWidgets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTreeView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QAbstractItemView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHeaderView",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QStyleFactory",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGraphicsDropShadowEffect",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QModelIndex",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QPoint",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QSize",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "isExtraImport": true,
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.newWindow",
        "description": "lib.newWindow",
        "isExtraImport": true,
        "detail": "lib.newWindow",
        "documentation": {}
    },
    {
        "label": "MyWindow",
        "importPath": "lib.newWindow",
        "description": "lib.newWindow",
        "isExtraImport": true,
        "detail": "lib.newWindow",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.newWindow",
        "description": "lib.newWindow",
        "isExtraImport": true,
        "detail": "lib.newWindow",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.newWindow",
        "description": "lib.newWindow",
        "isExtraImport": true,
        "detail": "lib.newWindow",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.newWindow",
        "description": "lib.newWindow",
        "isExtraImport": true,
        "detail": "lib.newWindow",
        "documentation": {}
    },
    {
        "label": "CreateFileTree",
        "importPath": "lib.fileTreeView",
        "description": "lib.fileTreeView",
        "isExtraImport": true,
        "detail": "lib.fileTreeView",
        "documentation": {}
    },
    {
        "label": "CreateFileTree",
        "importPath": "lib.fileTreeView",
        "description": "lib.fileTreeView",
        "isExtraImport": true,
        "detail": "lib.fileTreeView",
        "documentation": {}
    },
    {
        "label": "CreateFileTree",
        "importPath": "lib.fileTreeView",
        "description": "lib.fileTreeView",
        "isExtraImport": true,
        "detail": "lib.fileTreeView",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "makeProject",
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "isExtraImport": true,
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "lib.WindowMenu",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.WindowMenu",
        "description": "lib.WindowMenu",
        "detail": "lib.WindowMenu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.core.ui.newPanelWindow",
        "description": "lib.core.ui.newPanelWindow",
        "isExtraImport": true,
        "detail": "lib.core.ui.newPanelWindow",
        "documentation": {}
    },
    {
        "label": "PanelWindow",
        "importPath": "lib.core.ui.newPanelWindow",
        "description": "lib.core.ui.newPanelWindow",
        "isExtraImport": true,
        "detail": "lib.core.ui.newPanelWindow",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.core.function.theme",
        "description": "lib.core.function.theme",
        "isExtraImport": true,
        "detail": "lib.core.function.theme",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "qutepart",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qutepart",
        "description": "qutepart",
        "detail": "qutepart",
        "documentation": {}
    },
    {
        "label": "PyQt5.Qsci",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5.Qsci",
        "description": "PyQt5.Qsci",
        "detail": "PyQt5.Qsci",
        "documentation": {}
    },
    {
        "label": "lib.core.function.FileIcon",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.function.FileIcon",
        "description": "lib.core.function.FileIcon",
        "detail": "lib.core.function.FileIcon",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.core.function.FileIcon",
        "description": "lib.core.function.FileIcon",
        "isExtraImport": true,
        "detail": "lib.core.function.FileIcon",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "importPath": "lib.core.opengl.Optimizermaster.FileHandler",
        "description": "lib.core.opengl.Optimizermaster.FileHandler",
        "isExtraImport": true,
        "detail": "lib.core.opengl.Optimizermaster.FileHandler",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.core.opengl.PpyGl",
        "description": "lib.core.opengl.PpyGl",
        "isExtraImport": true,
        "detail": "lib.core.opengl.PpyGl",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_conf",
        "description": "examples.example_calculator.calc_conf",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_conf",
        "description": "examples.example_calculator.calc_conf",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_conf",
        "description": "examples.example_calculator.calc_conf",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_conf",
        "description": "examples.example_calculator.calc_conf",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_conf",
        "description": "examples.example_calculator.calc_conf",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_conf",
        "description": "examples.example_calculator.calc_conf",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_node_base",
        "description": "examples.example_calculator.calc_node_base",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_node_base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_node_base",
        "description": "examples.example_calculator.calc_node_base",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_node_base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_node_base",
        "description": "examples.example_calculator.calc_node_base",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_node_base",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.calc_node_base",
        "description": "examples.example_calculator.calc_node_base",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_node_base",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "loadStylesheets",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "pp",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "loadStylesheet",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "pp",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "pp",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "importPath": "nodeeditor.utils",
        "description": "nodeeditor.utils",
        "isExtraImport": true,
        "detail": "nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "examples.example_calculator.nodes",
        "description": "examples.example_calculator.nodes",
        "isExtraImport": true,
        "detail": "examples.example_calculator.nodes",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "nodeeditor.node_node",
        "description": "nodeeditor.node_node",
        "isExtraImport": true,
        "detail": "nodeeditor.node_node",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "nodeeditor.node_node",
        "description": "nodeeditor.node_node",
        "isExtraImport": true,
        "detail": "nodeeditor.node_node",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "nodeeditor.node_node",
        "description": "nodeeditor.node_node",
        "isExtraImport": true,
        "detail": "nodeeditor.node_node",
        "documentation": {}
    },
    {
        "label": "QDMNodeContentWidget",
        "importPath": "nodeeditor.node_content_widget",
        "description": "nodeeditor.node_content_widget",
        "isExtraImport": true,
        "detail": "nodeeditor.node_content_widget",
        "documentation": {}
    },
    {
        "label": "QDMNodeContentWidget",
        "importPath": "nodeeditor.node_content_widget",
        "description": "nodeeditor.node_content_widget",
        "isExtraImport": true,
        "detail": "nodeeditor.node_content_widget",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsNode",
        "importPath": "nodeeditor.node_graphics_node",
        "description": "nodeeditor.node_graphics_node",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_node",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsNode",
        "importPath": "nodeeditor.node_graphics_node",
        "description": "nodeeditor.node_graphics_node",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_node",
        "documentation": {}
    },
    {
        "label": "LEFT_CENTER",
        "importPath": "nodeeditor.node_socket",
        "description": "nodeeditor.node_socket",
        "isExtraImport": true,
        "detail": "nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "RIGHT_CENTER",
        "importPath": "nodeeditor.node_socket",
        "description": "nodeeditor.node_socket",
        "isExtraImport": true,
        "detail": "nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "nodeeditor.node_socket",
        "description": "nodeeditor.node_socket",
        "isExtraImport": true,
        "detail": "nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "NodeEditorWidget",
        "importPath": "nodeeditor.node_editor_widget",
        "description": "nodeeditor.node_editor_widget",
        "isExtraImport": true,
        "detail": "nodeeditor.node_editor_widget",
        "documentation": {}
    },
    {
        "label": "NodeEditorWidget",
        "importPath": "nodeeditor.node_editor_widget",
        "description": "nodeeditor.node_editor_widget",
        "isExtraImport": true,
        "detail": "nodeeditor.node_editor_widget",
        "documentation": {}
    },
    {
        "label": "EDGE_TYPE_DIRECT",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "EDGE_TYPE_BEZIER",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "Edge",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "EDGE_TYPE_BEZIER",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "Edge",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "EDGE_TYPE_BEZIER",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "Edge",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "Edge",
        "importPath": "nodeeditor.node_edge",
        "description": "nodeeditor.node_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "MODE_EDGE_DRAG",
        "importPath": "nodeeditor.node_graphics_view",
        "description": "nodeeditor.node_graphics_view",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsView",
        "importPath": "nodeeditor.node_graphics_view",
        "description": "nodeeditor.node_graphics_view",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "NodeEditorWindow",
        "importPath": "nodeeditor.node_editor_window",
        "description": "nodeeditor.node_editor_window",
        "isExtraImport": true,
        "detail": "nodeeditor.node_editor_window",
        "documentation": {}
    },
    {
        "label": "NodeEditorWindow",
        "importPath": "nodeeditor.node_editor_window",
        "description": "nodeeditor.node_editor_window",
        "isExtraImport": true,
        "detail": "nodeeditor.node_editor_window",
        "documentation": {}
    },
    {
        "label": "CalculatorSubWindow",
        "importPath": "examples.example_calculator.calc_sub_window",
        "description": "examples.example_calculator.calc_sub_window",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_sub_window",
        "documentation": {}
    },
    {
        "label": "QDMDragListbox",
        "importPath": "examples.example_calculator.calc_drag_listbox",
        "description": "examples.example_calculator.calc_drag_listbox",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_drag_listbox",
        "documentation": {}
    },
    {
        "label": "examples.example_calculator.qss.nodeeditor_dark_resources",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "examples.example_calculator.qss.nodeeditor_dark_resources",
        "detail": "examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "CalculatorWindow",
        "importPath": "examples.example_calculator.calc_window",
        "description": "examples.example_calculator.calc_window",
        "isExtraImport": true,
        "detail": "examples.example_calculator.calc_window",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Serializable",
        "importPath": "nodeeditor.node_serializable",
        "description": "nodeeditor.node_serializable",
        "isExtraImport": true,
        "detail": "nodeeditor.node_serializable",
        "documentation": {}
    },
    {
        "label": "Serializable",
        "importPath": "nodeeditor.node_serializable",
        "description": "nodeeditor.node_serializable",
        "isExtraImport": true,
        "detail": "nodeeditor.node_serializable",
        "documentation": {}
    },
    {
        "label": "Serializable",
        "importPath": "nodeeditor.node_serializable",
        "description": "nodeeditor.node_serializable",
        "isExtraImport": true,
        "detail": "nodeeditor.node_serializable",
        "documentation": {}
    },
    {
        "label": "Serializable",
        "importPath": "nodeeditor.node_serializable",
        "description": "nodeeditor.node_serializable",
        "isExtraImport": true,
        "detail": "nodeeditor.node_serializable",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "nodeeditor.node_graphics_edge",
        "description": "nodeeditor.node_graphics_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsEdge",
        "importPath": "nodeeditor.node_graphics_edge",
        "description": "nodeeditor.node_graphics_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsEdge",
        "importPath": "nodeeditor.node_graphics_edge",
        "description": "nodeeditor.node_graphics_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsEdge",
        "importPath": "nodeeditor.node_graphics_edge",
        "description": "nodeeditor.node_graphics_edge",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "Scene",
        "importPath": "nodeeditor.node_scene",
        "description": "nodeeditor.node_scene",
        "isExtraImport": true,
        "detail": "nodeeditor.node_scene",
        "documentation": {}
    },
    {
        "label": "InvalidFile",
        "importPath": "nodeeditor.node_scene",
        "description": "nodeeditor.node_scene",
        "isExtraImport": true,
        "detail": "nodeeditor.node_scene",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsSocket",
        "importPath": "nodeeditor.node_graphics_socket",
        "description": "nodeeditor.node_graphics_socket",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_socket",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsSocket",
        "importPath": "nodeeditor.node_graphics_socket",
        "description": "nodeeditor.node_graphics_socket",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_socket",
        "documentation": {}
    },
    {
        "label": "QDMCutLine",
        "importPath": "nodeeditor.node_graphics_cutline",
        "description": "nodeeditor.node_graphics_cutline",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_cutline",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsScene",
        "importPath": "nodeeditor.node_graphics_scene",
        "description": "nodeeditor.node_graphics_scene",
        "isExtraImport": true,
        "detail": "nodeeditor.node_graphics_scene",
        "documentation": {}
    },
    {
        "label": "SceneHistory",
        "importPath": "nodeeditor.node_scene_history",
        "description": "nodeeditor.node_scene_history",
        "isExtraImport": true,
        "detail": "nodeeditor.node_scene_history",
        "documentation": {}
    },
    {
        "label": "SceneClipboard",
        "importPath": "nodeeditor.node_scene_clipboard",
        "description": "nodeeditor.node_scene_clipboard",
        "isExtraImport": true,
        "detail": "nodeeditor.node_scene_clipboard",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "PrettyPrinter",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ThreeMF",
        "importPath": "lib.core.opengl.Optimizermaster",
        "description": "lib.core.opengl.Optimizermaster",
        "isExtraImport": true,
        "detail": "lib.core.opengl.Optimizermaster",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "stl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stl",
        "description": "stl",
        "detail": "stl",
        "documentation": {}
    },
    {
        "label": "mesh",
        "importPath": "stl",
        "description": "stl",
        "isExtraImport": true,
        "detail": "stl",
        "documentation": {}
    },
    {
        "label": "mesh",
        "importPath": "stl",
        "description": "stl",
        "isExtraImport": true,
        "detail": "stl",
        "documentation": {}
    },
    {
        "label": "mesh",
        "importPath": "stl",
        "description": "stl",
        "isExtraImport": true,
        "detail": "stl",
        "documentation": {}
    },
    {
        "label": "mesh",
        "importPath": "stl",
        "description": "stl",
        "isExtraImport": true,
        "detail": "stl",
        "documentation": {}
    },
    {
        "label": "RunTweakerFromProgram",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "RunTweakerFromProgram",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "RunTweakerFromProgram",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "RunTweakerFromProgram",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "RunTweakerFromProgram",
        "importPath": "RunTweakerFromProgram",
        "description": "RunTweakerFromProgram",
        "isExtraImport": true,
        "detail": "RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "mplot3d",
        "importPath": "mpl_toolkits",
        "description": "mpl_toolkits",
        "isExtraImport": true,
        "detail": "mpl_toolkits",
        "documentation": {}
    },
    {
        "label": "mplot3d",
        "importPath": "mpl_toolkits",
        "description": "mpl_toolkits",
        "isExtraImport": true,
        "detail": "mpl_toolkits",
        "documentation": {}
    },
    {
        "label": "mplot3d",
        "importPath": "mpl_toolkits",
        "description": "mpl_toolkits",
        "isExtraImport": true,
        "detail": "mpl_toolkits",
        "documentation": {}
    },
    {
        "label": "mplot3d",
        "importPath": "mpl_toolkits",
        "description": "mpl_toolkits",
        "isExtraImport": true,
        "detail": "mpl_toolkits",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "differential_evolution",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "fmin_tnc",
        "importPath": "scipy.optimize",
        "description": "scipy.optimize",
        "isExtraImport": true,
        "detail": "scipy.optimize",
        "documentation": {}
    },
    {
        "label": "pyeasyga",
        "importPath": "pyeasyga",
        "description": "pyeasyga",
        "isExtraImport": true,
        "detail": "pyeasyga",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Tweak",
        "importPath": "MeshTweaker",
        "description": "MeshTweaker",
        "isExtraImport": true,
        "detail": "MeshTweaker",
        "documentation": {}
    },
    {
        "label": "Tweak",
        "importPath": "MeshTweaker",
        "description": "MeshTweaker",
        "isExtraImport": true,
        "detail": "MeshTweaker",
        "documentation": {}
    },
    {
        "label": "Tweak",
        "importPath": "MeshTweaker",
        "description": "MeshTweaker",
        "isExtraImport": true,
        "detail": "MeshTweaker",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "FileHandler",
        "description": "FileHandler",
        "detail": "FileHandler",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "importPath": "FileHandler",
        "description": "FileHandler",
        "isExtraImport": true,
        "detail": "FileHandler",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "lib.core.function.Starter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.function.Starter",
        "description": "lib.core.function.Starter",
        "detail": "lib.core.function.Starter",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "importPath": "lib.core.ui.newPanelUI",
        "description": "lib.core.ui.newPanelUI",
        "isExtraImport": true,
        "detail": "lib.core.ui.newPanelUI",
        "documentation": {}
    },
    {
        "label": "lib.core.ui.ChoicePanel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "nbtlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nbtlib",
        "description": "nbtlib",
        "detail": "nbtlib",
        "documentation": {}
    },
    {
        "label": "sys,os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.os",
        "description": "sys.os",
        "detail": "sys.os",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib.pure.nbtToStl",
        "description": "lib.pure.nbtToStl",
        "isExtraImport": true,
        "detail": "lib.pure.nbtToStl",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "OpenGL.GL",
        "description": "OpenGL.GL",
        "isExtraImport": true,
        "detail": "OpenGL.GL",
        "documentation": {}
    },
    {
        "label": "vbo",
        "importPath": "OpenGL.arrays",
        "description": "OpenGL.arrays",
        "isExtraImport": true,
        "detail": "OpenGL.arrays",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "OpenGL.GLU",
        "description": "OpenGL.GLU",
        "isExtraImport": true,
        "detail": "OpenGL.GLU",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "OpenGL.GLUT",
        "description": "OpenGL.GLUT",
        "isExtraImport": true,
        "detail": "OpenGL.GLUT",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "importPath": "lib.ui",
        "description": "lib.ui",
        "isExtraImport": true,
        "detail": "lib.ui",
        "documentation": {}
    },
    {
        "label": "lib.core.function.TabPanel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.function.TabPanel",
        "description": "lib.core.function.TabPanel",
        "detail": "lib.core.function.TabPanel",
        "documentation": {}
    },
    {
        "label": "lib.core.function.Setting",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.function.Setting",
        "description": "lib.core.function.Setting",
        "detail": "lib.core.function.Setting",
        "documentation": {}
    },
    {
        "label": "lib.core.function.TabBar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.function.TabBar",
        "description": "lib.core.function.TabBar",
        "detail": "lib.core.function.TabBar",
        "documentation": {}
    },
    {
        "label": "lib.core.function.About",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.function.About",
        "description": "lib.core.function.About",
        "detail": "lib.core.function.About",
        "documentation": {}
    },
    {
        "label": "NewEditor",
        "importPath": "Main",
        "description": "Main",
        "isExtraImport": true,
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "MakeAbout",
        "kind": 6,
        "importPath": "lib.core.function.About",
        "description": "lib.core.function.About",
        "peekOfCode": "class MakeAbout(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.UIinit()\n    def UIinit(self):\n        self.mainLayout = QHBoxLayout()\n        self.Icon = QLabel()\n        self.Icon.setPixmap(QPixmap(r'./img/appicon/icon64.png'))\n        #self.Icon.setScaledContents(True)\n        self.Icon.setMinimumSize(64,64)",
        "detail": "lib.core.function.About",
        "documentation": {}
    },
    {
        "label": "getIcon",
        "kind": 2,
        "importPath": "lib.core.function.FileIcon",
        "description": "lib.core.function.FileIcon",
        "peekOfCode": "def getIcon(fileName):\n    return './img/file/icons/'+fileName+'.svg'",
        "detail": "lib.core.function.FileIcon",
        "documentation": {}
    },
    {
        "label": "SettingWindow",
        "kind": 6,
        "importPath": "lib.core.function.Setting",
        "description": "lib.core.function.Setting",
        "peekOfCode": "class SettingWindow(PanelWindow):\n    def __init__(self,parent,User):\n        super().__init__()\n        self.parent = parent\n        self.User = User\n        self.label_2.setText('setting - User')\n        globals()['SELF'] = self\n        self.lb = QVBoxLayout()\n        scroll = QScrollArea()\n        scroll.setObjectName('scroll')",
        "detail": "lib.core.function.Setting",
        "documentation": {}
    },
    {
        "label": "PanelStarter",
        "kind": 2,
        "importPath": "lib.core.function.Starter",
        "description": "lib.core.function.Starter",
        "peekOfCode": "def PanelStarter(Sender:QPushButton,self,Name) -> None:#导入模块部分\n    #Start the panel\n    #初始化面板\n    print(Name,self)\n    #要从一个sender的Text推导出此panel,推荐用parent\n    ParentWidget = Sender.parentWidget()\n    #准备更改Sender\n    #Sender.setText(Name)\n    for item in lib.WindowMenu.WindowMenu:\n        if item == Name:",
        "detail": "lib.core.function.Starter",
        "documentation": {}
    },
    {
        "label": "starterFromModule",
        "kind": 2,
        "importPath": "lib.core.function.Starter",
        "description": "lib.core.function.Starter",
        "peekOfCode": "def starterFromModule(Name:str,Parent:QWidget,self) -> None:#主初始化部分\n    #print(Name,Parent)#获取到参数，表示初始化导入模块成功\n    #准备清除现有的面板内容\n    #print(dir(Parent))\n    Parent_ = Parent.parent()\n    #print(Parent_.children())\n    for widget in Parent_.children():\n        if widget.objectName()[0:len('Child_main_widget')] == 'Child_main_widget' and type(widget) == QWidget:\n            IndexFromParent = widget.objectName()[len('Child_main_widget'):]\n            try:",
        "detail": "lib.core.function.Starter",
        "documentation": {}
    },
    {
        "label": "editors",
        "kind": 5,
        "importPath": "lib.core.function.TabBar",
        "description": "lib.core.function.TabBar",
        "peekOfCode": "editors = ['Start','Editor','Model','Node','Nbt','Terminal']",
        "detail": "lib.core.function.TabBar",
        "documentation": {}
    },
    {
        "label": "AppendTabWidget",
        "kind": 2,
        "importPath": "lib.core.function.TabPanel",
        "description": "lib.core.function.TabPanel",
        "peekOfCode": "def AppendTabWidget(self,Widget,TabName):\n    #初始化菜单栏2\n    for item in lib.WindowMenu.WindowMenu:\n        #把WindowMenu里的名字全部for出来\n        if item == TabName:\n            #如果确定是这个tab，则准备开始初始化\n            pass\n    pass",
        "detail": "lib.core.function.TabPanel",
        "documentation": {}
    },
    {
        "label": "ChangeTheme",
        "kind": 2,
        "importPath": "lib.core.function.theme",
        "description": "lib.core.function.theme",
        "peekOfCode": "def ChangeTheme(parent,data):\n    print_(parent,data)\n    if(data == 'light'):\n        style = QStyleFactory.create('Fusion')\n        QApplication.setStyle(style)\n        palette = style.standardPalette()\n        palette.setColor(QPalette.Mid, QColor(232, 243, 251))\n        QApplication.setPalette(palette)\n    elif(data == 'dark'):\n        QApplication.setStyle('Fusion')",
        "detail": "lib.core.function.theme",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Asset",
        "description": "lib.core.module.Asset",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)\n    ThisLayout = QVBoxLayout(ThisWidget)\n    ThisLayout.setContentsMargins(0,0,0,0)\n    ThisLayout.setSpacing(0)\n    PathWidget = PpathWidget(readConfig()['path']+'/'+readConfig()['name'])\n    ################################################################\n    SearchWidget = QWidget()",
        "detail": "lib.core.module.Asset",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Attribute",
        "description": "lib.core.module.Attribute",
        "peekOfCode": "def init(parent: QVBoxLayout, Name, self):\n    globals()['SELF'] = self\n    lb = QVBoxLayout()\n    scroll = QScrollArea()\n    scroll.setObjectName('scroll')\n    scroll.setStyleSheet(\n        '#scroll{background-color:#f9f9f9;border:0px !important;}')\n    lb.setContentsMargins(10, 5, 5, 0)\n    MainWidgetThis = QWidget()\n    MainWidgetThis.setObjectName('MainWidgetThis_Attr')",
        "detail": "lib.core.module.Attribute",
        "documentation": {}
    },
    {
        "label": "UiInit",
        "kind": 2,
        "importPath": "lib.core.module.Attribute",
        "description": "lib.core.module.Attribute",
        "peekOfCode": "def UiInit(layout: QVBoxLayout, self) -> None:\n    SearchInput_Attribute_Widget = QWidget()\n    SearchInput_Attribute_Widget.setMaximumHeight(20)\n    # SearchInput_Attribute_Widget.setStyleSheet('background-color:red;')\n    SearchInput_Attribute = QHBoxLayout()\n    SearchInput_Attribute.setContentsMargins(0, 0, 0, 0)\n    SearchInput_Attribute.setSpacing(0)\n    SearchInput_Attribute_Widget.setLayout(SearchInput_Attribute)\n    layout.addWidget(SearchInput_Attribute_Widget)\n    searchComBox = QComboBox()",
        "detail": "lib.core.module.Attribute",
        "documentation": {}
    },
    {
        "label": "ConnectToAttr",
        "kind": 2,
        "importPath": "lib.core.module.Attribute",
        "description": "lib.core.module.Attribute",
        "peekOfCode": "def ConnectToAttr():\n    pass",
        "detail": "lib.core.module.Attribute",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Builtin",
        "description": "lib.core.module.Builtin",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)",
        "detail": "lib.core.module.Builtin",
        "documentation": {}
    },
    {
        "label": "CodeWidget",
        "kind": 6,
        "importPath": "lib.core.module.Editor",
        "description": "lib.core.module.Editor",
        "peekOfCode": "class CodeWidget(Qsci.QsciScintilla):\n    #init\n    def __init__(self,InfoLabel):\n        super().__init__()\n        self.Font_ = QtGui.QFont('Consolas', 9)\n        self.InfoLabel = InfoLabel\n        self.setSelectionForegroundColor(QColor(\"#000\"))\n        self.setSelectionBackgroundColor(QColor(\"#d9e1ec\"))\n        self.setEolMode(self.SC_EOL_LF)    # 以\\n换行\n        self.setWrapMode(self.WrapWord)    # 自动换行。self.WrapWord是父类QsciScintilla的",
        "detail": "lib.core.module.Editor",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Editor",
        "description": "lib.core.module.Editor",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    print(\"init ->\",Name)#输出调试\n    self.EditorToptabs = QTabWidget()\n    self.EditorToptabs.TabShape(1)\n    self.EditorToptabs.setObjectName('TextEditor')\n    self.EditorToptabs.setStyleSheet('''\nQTabBar::tab {\n    padding-left: 5px;\n    border-right: 1px solid #e5e5e5;",
        "detail": "lib.core.module.Editor",
        "documentation": {}
    },
    {
        "label": "ClickTextEditor",
        "kind": 2,
        "importPath": "lib.core.module.Editor",
        "description": "lib.core.module.Editor",
        "peekOfCode": "def ClickTextEditor():\n    pass\ndef NewTextEditor(self,Name,Text,filetype,index):\n    globals()[Name+\"_Widget\"] = QWidget()\n    globals()[Name+\"_Widget\"].setStyleSheet('border: 0px !important;background-color:#fff;border-radius: 0px 0px 5px 5px !important;')\n    globals()[Name+\"_Path\"] = QWidget()\n    InfoLabelLayout = QHBoxLayout(globals()[Name+\"_Path\"])\n    InfoLabelLayout.setContentsMargins(0,0,0,0)\n    globals()[Name+\"_Path_Label\"] = QLabel()\n    globals()[Name+\"_Path_Label\"].setStyleSheet('text-align: left;')",
        "detail": "lib.core.module.Editor",
        "documentation": {}
    },
    {
        "label": "NewTextEditor",
        "kind": 2,
        "importPath": "lib.core.module.Editor",
        "description": "lib.core.module.Editor",
        "peekOfCode": "def NewTextEditor(self,Name,Text,filetype,index):\n    globals()[Name+\"_Widget\"] = QWidget()\n    globals()[Name+\"_Widget\"].setStyleSheet('border: 0px !important;background-color:#fff;border-radius: 0px 0px 5px 5px !important;')\n    globals()[Name+\"_Path\"] = QWidget()\n    InfoLabelLayout = QHBoxLayout(globals()[Name+\"_Path\"])\n    InfoLabelLayout.setContentsMargins(0,0,0,0)\n    globals()[Name+\"_Path_Label\"] = QLabel()\n    globals()[Name+\"_Path_Label\"].setStyleSheet('text-align: left;')\n    globals()[Name+\"_Path_Label\"].setText('行 0, 列 0')\n    globals()[Name+\"_Path_Label\"].setMinimumHeight(20)",
        "detail": "lib.core.module.Editor",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.HexEditor",
        "description": "lib.core.module.HexEditor",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)",
        "detail": "lib.core.module.HexEditor",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Info",
        "description": "lib.core.module.Info",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)\n    AppIcon = QLabel()\n    AppIcon.setPixmap(QtGui.QPixmap('./img/appicon/big_alpha_5.png'))\n    AppIcon.setStyleSheet('''border: 0px;''')\n    MainLayout = QVBoxLayout()\n    MainLayout.addStretch(100)\n    MainLayout.addWidget(AppIcon ,alignment=Qt.AlignCenter)",
        "detail": "lib.core.module.Info",
        "documentation": {}
    },
    {
        "label": "LastTime",
        "kind": 5,
        "importPath": "lib.core.module.Info",
        "description": "lib.core.module.Info",
        "peekOfCode": "LastTime = '2023.4.10'\nversionThis = '0.0.1 Development Bate'\ndef init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)\n    AppIcon = QLabel()\n    AppIcon.setPixmap(QtGui.QPixmap('./img/appicon/big_alpha_5.png'))\n    AppIcon.setStyleSheet('''border: 0px;''')\n    MainLayout = QVBoxLayout()",
        "detail": "lib.core.module.Info",
        "documentation": {}
    },
    {
        "label": "versionThis",
        "kind": 5,
        "importPath": "lib.core.module.Info",
        "description": "lib.core.module.Info",
        "peekOfCode": "versionThis = '0.0.1 Development Bate'\ndef init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)\n    AppIcon = QLabel()\n    AppIcon.setPixmap(QtGui.QPixmap('./img/appicon/big_alpha_5.png'))\n    AppIcon.setStyleSheet('''border: 0px;''')\n    MainLayout = QVBoxLayout()\n    MainLayout.addStretch(100)",
        "detail": "lib.core.module.Info",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.ItemList",
        "description": "lib.core.module.ItemList",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)",
        "detail": "lib.core.module.ItemList",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Model",
        "description": "lib.core.module.Model",
        "peekOfCode": "def init(parent: QVBoxLayout, Name, self) -> None:\n    global SELF\n    globals()['SELF'] = self\n    SELF = self\n    # 可以统一不用定义在self下\n    ThisWidget = QWidget()\n    ThisWidget.setStyleSheet('border:0px;')\n    parent.addWidget(ThisWidget)\n    self.ThisLeftDiv = QWidget()\n    self.ModelToptabs = QTabWidget()",
        "detail": "lib.core.module.Model",
        "documentation": {}
    },
    {
        "label": "AddModelEditor",
        "kind": 2,
        "importPath": "lib.core.module.Model",
        "description": "lib.core.module.Model",
        "peekOfCode": "def AddModelEditor(self, Name, mode):\n    globals()[Name+\"_Widget\"+str(self.index)] = World()\n    self.ModelToptabs.addTab(\n        globals()[Name+\"_Widget\"+str(self.index)], QIcon(ModelFile[mode]), Name+'.nbt')\n    self.ModelToptabs.currentChanged.connect(ClickTextEditor)\n    self.index = self.index + 1\n    #\ndef ClickTextEditor():\n    pass\ndef getfile():",
        "detail": "lib.core.module.Model",
        "documentation": {}
    },
    {
        "label": "ClickTextEditor",
        "kind": 2,
        "importPath": "lib.core.module.Model",
        "description": "lib.core.module.Model",
        "peekOfCode": "def ClickTextEditor():\n    pass\ndef getfile():\n    dlg=QtWidgets.QFileDialog()\n    f=dlg.getOpenFileName(SELF,'Open File','.','STL File (*.stl)')\n    file=FileHandler().load_mesh(f[0])#f[0]是路径，f[1]是类型\n    data=array(file['mesh'],'f')\n    print(data)\n    model.append({'material':Materials[0],'data':data})\n    ThisWorld = SELF.ModelToptabs.currentWidget().widget()",
        "detail": "lib.core.module.Model",
        "documentation": {}
    },
    {
        "label": "getfile",
        "kind": 2,
        "importPath": "lib.core.module.Model",
        "description": "lib.core.module.Model",
        "peekOfCode": "def getfile():\n    dlg=QtWidgets.QFileDialog()\n    f=dlg.getOpenFileName(SELF,'Open File','.','STL File (*.stl)')\n    file=FileHandler().load_mesh(f[0])#f[0]是路径，f[1]是类型\n    data=array(file['mesh'],'f')\n    print(data)\n    model.append({'material':Materials[0],'data':data})\n    ThisWorld = SELF.ModelToptabs.currentWidget().widget()\n    print(ThisWorld)\n    '''SELF.qlistwidget.addItem(f[0].split('/')[-1].split('.')[0])",
        "detail": "lib.core.module.Model",
        "documentation": {}
    },
    {
        "label": "SELF",
        "kind": 5,
        "importPath": "lib.core.module.Model",
        "description": "lib.core.module.Model",
        "peekOfCode": "SELF = None\ndef init(parent: QVBoxLayout, Name, self) -> None:\n    global SELF\n    globals()['SELF'] = self\n    SELF = self\n    # 可以统一不用定义在self下\n    ThisWidget = QWidget()\n    ThisWidget.setStyleSheet('border:0px;')\n    parent.addWidget(ThisWidget)\n    self.ThisLeftDiv = QWidget()",
        "detail": "lib.core.module.Model",
        "documentation": {}
    },
    {
        "label": "ModelFile",
        "kind": 5,
        "importPath": "lib.core.module.Model",
        "description": "lib.core.module.Model",
        "peekOfCode": "ModelFile = {'newNBT': './img/icons/box.svg',\n             'openNBT': './img/icons/codesandbox.svg',\n             'newJson': '', \n             'openJson': ''}\nmodel = []\ndef AddModelEditor(self, Name, mode):\n    globals()[Name+\"_Widget\"+str(self.index)] = World()\n    self.ModelToptabs.addTab(\n        globals()[Name+\"_Widget\"+str(self.index)], QIcon(ModelFile[mode]), Name+'.nbt')\n    self.ModelToptabs.currentChanged.connect(ClickTextEditor)",
        "detail": "lib.core.module.Model",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "lib.core.module.Model",
        "description": "lib.core.module.Model",
        "peekOfCode": "model = []\ndef AddModelEditor(self, Name, mode):\n    globals()[Name+\"_Widget\"+str(self.index)] = World()\n    self.ModelToptabs.addTab(\n        globals()[Name+\"_Widget\"+str(self.index)], QIcon(ModelFile[mode]), Name+'.nbt')\n    self.ModelToptabs.currentChanged.connect(ClickTextEditor)\n    self.index = self.index + 1\n    #\ndef ClickTextEditor():\n    pass",
        "detail": "lib.core.module.Model",
        "documentation": {}
    },
    {
        "label": "onTreeClicked",
        "kind": 2,
        "importPath": "lib.core.module.NbtViewer",
        "description": "lib.core.module.NbtViewer",
        "peekOfCode": "def onTreeClicked(index):\n    global bottomWidget,treeView,SELF\n    item = treeView.currentItem()\n    bottomWidget.setText(\"key=%s, value=%s\"%(item.text(0), item.text(1)))\ndef init(parent,Name,self):\n    global bottomWidget,treeView,SELF\n    SELF = self\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)",
        "detail": "lib.core.module.NbtViewer",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.NbtViewer",
        "description": "lib.core.module.NbtViewer",
        "peekOfCode": "def init(parent,Name,self):\n    global bottomWidget,treeView,SELF\n    SELF = self\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)\n    ThisLayout = QVBoxLayout(ThisWidget)\n    ThisLayout.setContentsMargins(0,0,0,0)\n    ThisLayout.setSpacing(0)\n    ThisWidget.setLayout(ThisLayout)",
        "detail": "lib.core.module.NbtViewer",
        "documentation": {}
    },
    {
        "label": "OpenNbtFile",
        "kind": 2,
        "importPath": "lib.core.module.NbtViewer",
        "description": "lib.core.module.NbtViewer",
        "peekOfCode": "def OpenNbtFile():\n    global bottomWidget,treeView,SELF\n    filepath = QFileDialog.getOpenFileName(SELF, \"选择文件\")\n    print_('openNbtfile:',filepath)\n    print('openNbtfile:',filepath)\n    SELF.makeTreethread = NbtTrewwThread(filepath[0],treeView)\n    SELF.makeTreethread.start()\n    #MakeHexEditorStart()",
        "detail": "lib.core.module.NbtViewer",
        "documentation": {}
    },
    {
        "label": "bottomWidget",
        "kind": 5,
        "importPath": "lib.core.module.NbtViewer",
        "description": "lib.core.module.NbtViewer",
        "peekOfCode": "bottomWidget = None\ntreeView = None\nSELF = None\n#end\ndef onTreeClicked(index):\n    global bottomWidget,treeView,SELF\n    item = treeView.currentItem()\n    bottomWidget.setText(\"key=%s, value=%s\"%(item.text(0), item.text(1)))\ndef init(parent,Name,self):\n    global bottomWidget,treeView,SELF",
        "detail": "lib.core.module.NbtViewer",
        "documentation": {}
    },
    {
        "label": "treeView",
        "kind": 5,
        "importPath": "lib.core.module.NbtViewer",
        "description": "lib.core.module.NbtViewer",
        "peekOfCode": "treeView = None\nSELF = None\n#end\ndef onTreeClicked(index):\n    global bottomWidget,treeView,SELF\n    item = treeView.currentItem()\n    bottomWidget.setText(\"key=%s, value=%s\"%(item.text(0), item.text(1)))\ndef init(parent,Name,self):\n    global bottomWidget,treeView,SELF\n    SELF = self",
        "detail": "lib.core.module.NbtViewer",
        "documentation": {}
    },
    {
        "label": "SELF",
        "kind": 5,
        "importPath": "lib.core.module.NbtViewer",
        "description": "lib.core.module.NbtViewer",
        "peekOfCode": "SELF = None\n#end\ndef onTreeClicked(index):\n    global bottomWidget,treeView,SELF\n    item = treeView.currentItem()\n    bottomWidget.setText(\"key=%s, value=%s\"%(item.text(0), item.text(1)))\ndef init(parent,Name,self):\n    global bottomWidget,treeView,SELF\n    SELF = self\n    globals()['SELF'] = self",
        "detail": "lib.core.module.NbtViewer",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Node",
        "description": "lib.core.module.Node",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)",
        "detail": "lib.core.module.Node",
        "documentation": {}
    },
    {
        "label": "setupUi",
        "kind": 2,
        "importPath": "lib.core.module.Resource",
        "description": "lib.core.module.Resource",
        "peekOfCode": "def setupUi(self, Frame):\n    self.Projectfiles = 0\n    self.Projectfolders = 0\n    self.verticalLayout_2 = QtWidgets.QVBoxLayout(Frame)\n    self.verticalLayout_2.setContentsMargins(1, 0, 1, 0)\n    self.verticalLayout_2.setSpacing(0)\n    self.widget_ = QtWidgets.QWidget(Frame)\n    self.widget_.setObjectName(\"Resource_widget\")\n    self.widget_.setMaximumSize(QtCore.QSize(16777215, 25))\n    self.widget_.setMinimumHeight(25)",
        "detail": "lib.core.module.Resource",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Resource",
        "description": "lib.core.module.Resource",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    print(\"init ->\",Name)#输出调试\n    #正式开始实现\n    #布局\n    InFrameWidget = QWidget()\n    parent.addWidget(InFrameWidget)\n    #导入现在的布局\n    setupUi(self,InFrameWidget)\n    #基础控件部分",
        "detail": "lib.core.module.Resource",
        "documentation": {}
    },
    {
        "label": "GetDir",
        "kind": 2,
        "importPath": "lib.core.module.Resource",
        "description": "lib.core.module.Resource",
        "peekOfCode": "def GetDir(self,Lastpath,tabCount):#从Main里迁移出来\n    for file_name in os.listdir(Lastpath):\n        if os.path.isdir(Lastpath+'//'+file_name) == True:\n            #print(file_name)\n            #is folder\n            #print(Lastpath+'\\\\'+file_name)\n            self.pathList.append(tabCount*'  '+file_name)\n            self.Projectfolders = self.Projectfolders + 1\n            GetDir(self,Lastpath+'\\\\'+file_name,tabCount = tabCount+1)\n        else:",
        "detail": "lib.core.module.Resource",
        "documentation": {}
    },
    {
        "label": "PPythonConsole",
        "kind": 6,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "class PPythonConsole(QLineEdit):\n    #Pure [xk] makes this class\n    def setEnterFunction(self,widget,func,ThisTerminalindex) -> None:\n        self.runningFunc = func\n        self.runWidget = widget\n        widget.ThisLine = 0\n        widget.prompt = False\n        ThisFont = QFont()\n        ThisFont.setFamily('Courier New')\n        widget.setFont(ThisFont)",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "PLuaConsole",
        "kind": 6,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "class PLuaConsole(QLineEdit):\n    def setEnterFunction(self,widget,func,ThisTerminalindex) -> None:\n        self.runningFunc = func\n        self.runWidget = widget\n        widget.ThisLine = 0\n        widget.prompt = False\n        ThisFont = QFont()\n        ThisFont.setFamily('Courier New')\n        widget.setFont(ThisFont)\n        widget.append('<b style=\"color:blue;\">Lua</b> <a style=\"color:gray;\"> 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio</a>')",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def init(parent: QVBoxLayout, Name, self):\n    globals()['SELF'] = self\n    global SELF\n    SELF = self\n    # 可以统一不用定义在self下\n    ThisWidget = QWidget()\n    ThisWidget.setStyleSheet('border:0px;')\n    parent.addWidget(ThisWidget)\n    self.TerminalToptabs = QTabWidget()\n    self.TerminalToptabs.TabShape(1)",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "AddTerminal",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def AddTerminal( Name, mode):\n    global consoleIndex\n    global Terminalindex\n    globals()[Name+\"_Widget\"+str(Terminalindex)] = QWidget()\n    ThisTabWidget = globals()[Name+\"_Widget\"+str(Terminalindex)]\n    SELF.TerminalToptabs.addTab(\n        ThisTabWidget, QIcon(TerminalType[mode]), Name)\n    SELF.TerminalToptabs.currentChanged.connect(ClickTextEditor)\n    if mode == 'python':\n        ThisLayout = QVBoxLayout()",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def log(SELF=SELF,widgetList=widgetList,*argv):\n    print(*argv,SELF=SELF,widgetList = widgetList)\n#log(SELF,1,2,3,4)\ndef ClickTextEditor():\n    pass\ndef running(widget:QTextBrowser,command:str,ThisTerminalindex):\n    print(SELF)\n    global widgetList\n    widgetList = []\n    print(SELF.outputIndex)",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "ClickTextEditor",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def ClickTextEditor():\n    pass\ndef running(widget:QTextBrowser,command:str,ThisTerminalindex):\n    print(SELF)\n    global widgetList\n    widgetList = []\n    print(SELF.outputIndex)\n    for i in range(0,SELF.outputIndex):\n        print(i)\n        widgetList.append(globals()['output_'+str(i)])",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def running(widget:QTextBrowser,command:str,ThisTerminalindex):\n    print(SELF)\n    global widgetList\n    widgetList = []\n    print(SELF.outputIndex)\n    for i in range(0,SELF.outputIndex):\n        print(i)\n        widgetList.append(globals()['output_'+str(i)])\n    print(widgetList)\n    try:",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "Pinput",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def Pinput(*argv):\n    pass\ndef PureConsoleOutPut(widget,*argv):\n    outstr = ''\n    if widget.prompt == True:\n        for value in argv:\n            outstr += str(value) + ' '\n        prompt = '<b style=\"color:#111;\">[</b><b style=\"color:red;\">'+str(widget.ThisLine)+'</b><b style=\"color:#111;\">] : </b>'\n        widget.append(prompt+str(outstr))\n        widget.prompt = False",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "PureConsoleOutPut",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def PureConsoleOutPut(widget,*argv):\n    outstr = ''\n    if widget.prompt == True:\n        for value in argv:\n            outstr += str(value) + ' '\n        prompt = '<b style=\"color:#111;\">[</b><b style=\"color:red;\">'+str(widget.ThisLine)+'</b><b style=\"color:#111;\">] : </b>'\n        widget.append(prompt+str(outstr))\n        widget.prompt = False\n    else:\n        for value in argv:",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "runningLua",
        "kind": 2,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "def runningLua(widget:QTextBrowser,command:str,ThisTerminalindex):\n    with open('./scripts/lua/run.lua','w',encoding='utf-8') as wf:\n        wf.write(command)\n    with os.popen('scripts\\\\lua\\\\lua.exe scripts\\\\lua\\\\run.lua 2>&1','r') as shell:\n        widget.append(shell.read())\n    print('run Lua: '+command+' in ',ThisTerminalindex,SELF=SELF,widgetList = widgetList)",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "SELF",
        "kind": 5,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "SELF = None\nwidgetList = []\nconsoleIndex = 0\nTerminalindex = 0\ndef init(parent: QVBoxLayout, Name, self):\n    globals()['SELF'] = self\n    global SELF\n    SELF = self\n    # 可以统一不用定义在self下\n    ThisWidget = QWidget()",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "widgetList",
        "kind": 5,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "widgetList = []\nconsoleIndex = 0\nTerminalindex = 0\ndef init(parent: QVBoxLayout, Name, self):\n    globals()['SELF'] = self\n    global SELF\n    SELF = self\n    # 可以统一不用定义在self下\n    ThisWidget = QWidget()\n    ThisWidget.setStyleSheet('border:0px;')",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "consoleIndex",
        "kind": 5,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "consoleIndex = 0\nTerminalindex = 0\ndef init(parent: QVBoxLayout, Name, self):\n    globals()['SELF'] = self\n    global SELF\n    SELF = self\n    # 可以统一不用定义在self下\n    ThisWidget = QWidget()\n    ThisWidget.setStyleSheet('border:0px;')\n    parent.addWidget(ThisWidget)",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "Terminalindex",
        "kind": 5,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "Terminalindex = 0\ndef init(parent: QVBoxLayout, Name, self):\n    globals()['SELF'] = self\n    global SELF\n    SELF = self\n    # 可以统一不用定义在self下\n    ThisWidget = QWidget()\n    ThisWidget.setStyleSheet('border:0px;')\n    parent.addWidget(ThisWidget)\n    self.TerminalToptabs = QTabWidget()",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "TerminalType",
        "kind": 5,
        "importPath": "lib.core.module.Terminal",
        "description": "lib.core.module.Terminal",
        "peekOfCode": "TerminalType = {'local':'./img/cmd.ico',\n                'python':'./img/file/icons/python.svg',\n                'lua':'./img/file/icons/lua.svg',\n                'output':'./img/file/icons/log.svg'}\ndef AddTerminal( Name, mode):\n    global consoleIndex\n    global Terminalindex\n    globals()[Name+\"_Widget\"+str(Terminalindex)] = QWidget()\n    ThisTabWidget = globals()[Name+\"_Widget\"+str(Terminalindex)]\n    SELF.TerminalToptabs.addTab(",
        "detail": "lib.core.module.Terminal",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "lib.core.module.White",
        "description": "lib.core.module.White",
        "peekOfCode": "def init(parent,Name,self):\n    globals()['SELF'] = self\n    ThisWidget = QWidget()\n    parent.addWidget(ThisWidget)",
        "detail": "lib.core.module.White",
        "documentation": {}
    },
    {
        "label": "CalcInputContent",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.input",
        "description": "lib.core.node.examples.example_calculator.nodes.input",
        "peekOfCode": "class CalcInputContent(QDMNodeContentWidget):\n    def initUI(self):\n        self.edit = QLineEdit(\"1\", self)\n        self.edit.setAlignment(Qt.AlignRight)\n        self.edit.setObjectName(self.node.content_label_objname)\n    def serialize(self):\n        res = super().serialize()\n        res['value'] = self.edit.text()\n        return res\n    def deserialize(self, data, hashmap={}):",
        "detail": "lib.core.node.examples.example_calculator.nodes.input",
        "documentation": {}
    },
    {
        "label": "CalcNode_Input",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.input",
        "description": "lib.core.node.examples.example_calculator.nodes.input",
        "peekOfCode": "class CalcNode_Input(CalcNode):\n    icon = \"icons/in.png\"\n    op_code = OP_NODE_INPUT\n    op_title = \"Input\"\n    content_label_objname = \"calc_node_input\"\n    def __init__(self, scene):\n        super().__init__(scene, inputs=[], outputs=[3])\n        self.eval()\n    def initInnerClasses(self):\n        self.content = CalcInputContent(self)",
        "detail": "lib.core.node.examples.example_calculator.nodes.input",
        "documentation": {}
    },
    {
        "label": "CalcNode_Add",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.operations",
        "description": "lib.core.node.examples.example_calculator.nodes.operations",
        "peekOfCode": "class CalcNode_Add(CalcNode):\n    icon = \"icons/add.png\"\n    op_code = OP_NODE_ADD\n    op_title = \"Add\"\n    content_label = \"+\"\n    content_label_objname = \"calc_node_bg\"\n    def evalOperation(self, input1, input2):\n        return input1 + input2\n@register_node(OP_NODE_SUB)\nclass CalcNode_Sub(CalcNode):",
        "detail": "lib.core.node.examples.example_calculator.nodes.operations",
        "documentation": {}
    },
    {
        "label": "CalcNode_Sub",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.operations",
        "description": "lib.core.node.examples.example_calculator.nodes.operations",
        "peekOfCode": "class CalcNode_Sub(CalcNode):\n    icon = \"icons/sub.png\"\n    op_code = OP_NODE_SUB\n    op_title = \"Substract\"\n    content_label = \"-\"\n    content_label_objname = \"calc_node_bg\"\n    def evalOperation(self, input1, input2):\n        return input1 - input2\n@register_node(OP_NODE_MUL)\nclass CalcNode_Mul(CalcNode):",
        "detail": "lib.core.node.examples.example_calculator.nodes.operations",
        "documentation": {}
    },
    {
        "label": "CalcNode_Mul",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.operations",
        "description": "lib.core.node.examples.example_calculator.nodes.operations",
        "peekOfCode": "class CalcNode_Mul(CalcNode):\n    icon = \"icons/mul.png\"\n    op_code = OP_NODE_MUL\n    op_title = \"Multiply\"\n    content_label = \"*\"\n    content_label_objname = \"calc_node_mul\"\n    def evalOperation(self, input1, input2):\n        print('foo')\n        return input1 * input2\n@register_node(OP_NODE_DIV)",
        "detail": "lib.core.node.examples.example_calculator.nodes.operations",
        "documentation": {}
    },
    {
        "label": "CalcNode_Div",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.operations",
        "description": "lib.core.node.examples.example_calculator.nodes.operations",
        "peekOfCode": "class CalcNode_Div(CalcNode):\n    icon = \"icons/divide.png\"\n    op_code = OP_NODE_DIV\n    op_title = \"Divide\"\n    content_label = \"/\"\n    content_label_objname = \"calc_node_div\"\n    def evalOperation(self, input1, input2):\n        return input1 / input2\n# way how to register by function call\n# register_node_now(OP_NODE_ADD, CalcNode_Add)",
        "detail": "lib.core.node.examples.example_calculator.nodes.operations",
        "documentation": {}
    },
    {
        "label": "CalcOutputContent",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.output",
        "description": "lib.core.node.examples.example_calculator.nodes.output",
        "peekOfCode": "class CalcOutputContent(QDMNodeContentWidget):\n    def initUI(self):\n        self.lbl = QLabel(\"42\", self)\n        self.lbl.setAlignment(Qt.AlignLeft)\n        self.lbl.setObjectName(self.node.content_label_objname)\n@register_node(OP_NODE_OUTPUT)\nclass CalcNode_Output(CalcNode):\n    icon = \"icons/out.png\"\n    op_code = OP_NODE_OUTPUT\n    op_title = \"Output\"",
        "detail": "lib.core.node.examples.example_calculator.nodes.output",
        "documentation": {}
    },
    {
        "label": "CalcNode_Output",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.nodes.output",
        "description": "lib.core.node.examples.example_calculator.nodes.output",
        "peekOfCode": "class CalcNode_Output(CalcNode):\n    icon = \"icons/out.png\"\n    op_code = OP_NODE_OUTPUT\n    op_title = \"Output\"\n    content_label_objname = \"calc_node_output\"\n    def __init__(self, scene):\n        super().__init__(scene, inputs=[1], outputs=[])\n    def initInnerClasses(self):\n        self.content = CalcOutputContent(self)\n        self.grNode = CalcGraphicsNode(self)",
        "detail": "lib.core.node.examples.example_calculator.nodes.output",
        "documentation": {}
    },
    {
        "label": "qInitResources",
        "kind": 2,
        "importPath": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "peekOfCode": "def qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "qCleanupResources",
        "kind": 2,
        "importPath": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "peekOfCode": "def qCleanupResources():\n    QtCore.qUnregisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\nqInitResources()",
        "detail": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "qt_resource_data",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "peekOfCode": "qt_resource_data = b\"\\\n\\x00\\x00\\x05\\x1a\\\n\\x89\\\n\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\\n\\x00\\x00\\x0e\\x00\\x00\\x00\\x0e\\x08\\x06\\x00\\x00\\x00\\x1f\\x48\\x2d\\xd1\\\n\\x00\\x00\\x00\\x19\\x74\\x45\\x58\\x74\\x53\\x6f\\x66\\x74\\x77\\x61\\x72\\x65\\\n\\x00\\x41\\x64\\x6f\\x62\\x65\\x20\\x49\\x6d\\x61\\x67\\x65\\x52\\x65\\x61\\x64\\\n\\x79\\x71\\xc9\\x65\\x3c\\x00\\x00\\x03\\x76\\x69\\x54\\x58\\x74\\x58\\x4d\\x4c\\\n\\x3a\\x63\\x6f\\x6d\\x2e\\x61\\x64\\x6f\\x62\\x65\\x2e\\x78\\x6d\\x70\\x00\\x00\\\n\\x00\\x00\\x00\\x3c\\x3f\\x78\\x70\\x61\\x63\\x6b\\x65\\x74\\x20\\x62\\x65\\x67\\",
        "detail": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "qt_resource_name",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "peekOfCode": "qt_resource_name = b\"\\\n\\x00\\x05\\\n\\x00\\x6f\\xa6\\x53\\\n\\x00\\x69\\\n\\x00\\x63\\x00\\x6f\\x00\\x6e\\x00\\x73\\\n\\x00\\x1d\\\n\\x0d\\x61\\x33\\xc7\\\n\\x00\\x74\\\n\\x00\\x61\\x00\\x62\\x00\\x5f\\x00\\x63\\x00\\x6c\\x00\\x6f\\x00\\x73\\x00\\x65\\x00\\x5f\\x00\\x6e\\x00\\x6f\\x00\\x6e\\x00\\x73\\x00\\x65\\x00\\x6c\\x00\\x65\\\n\\x00\\x63\\x00\\x74\\x00\\x65\\x00\\x64\\x00\\x5f\\x00\\x62\\x00\\x74\\x00\\x6e\\x00\\x2e\\x00\\x70\\x00\\x6e\\x00\\x67\\",
        "detail": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct_v1",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "peekOfCode": "qt_resource_struct_v1 = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\xf6\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x11\\xaf\\\n\\x00\\x00\\x00\\x50\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x05\\x1e\\\n\\x00\\x00\\x01\\x30\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x17\\xbe\\\n\\x00\\x00\\x00\\x8c\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x0b\\x34\\\n\\x00\\x00\\x00\\xce\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x0c\\x6a\\\n\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\\n\"",
        "detail": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "qt_resource_struct_v2",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "peekOfCode": "qt_resource_struct_v2 = b\"\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x02\\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\\n\\x00\\x00\\x00\\xf6\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x11\\xaf\\\n\\x00\\x00\\x01\\x68\\xe2\\x86\\x4e\\x20\\\n\\x00\\x00\\x00\\x50\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x05\\x1e\\\n\\x00\\x00\\x01\\x68\\xe2\\x86\\x12\\xbe\\\n\\x00\\x00\\x01\\x30\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x17\\xbe\\",
        "detail": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "qt_version",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "description": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "peekOfCode": "qt_version = [int(v) for v in QtCore.qVersion().split('.')]\nif qt_version < [5, 8, 0]:\n    rcc_version = 1\n    qt_resource_struct = qt_resource_struct_v1\nelse:\n    rcc_version = 2\n    qt_resource_struct = qt_resource_struct_v2\ndef qInitResources():\n    QtCore.qRegisterResourceData(rcc_version, qt_resource_struct, qt_resource_name, qt_resource_data)\ndef qCleanupResources():",
        "detail": "lib.core.node.examples.example_calculator.qss.nodeeditor_dark_resources",
        "documentation": {}
    },
    {
        "label": "ConfException",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "class ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:\n        raise InvalidNodeRegistration(\"Duplicite node registration of '%s'. There is already %s\" %(\n            op_code, CALC_NODES[op_code]\n        ))\n    CALC_NODES[op_code] = class_reference\ndef register_node(op_code):",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "InvalidNodeRegistration",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "class InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:\n        raise InvalidNodeRegistration(\"Duplicite node registration of '%s'. There is already %s\" %(\n            op_code, CALC_NODES[op_code]\n        ))\n    CALC_NODES[op_code] = class_reference\ndef register_node(op_code):\n    def decorator(original_class):",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "OpCodeNotRegistered",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "class OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:\n        raise InvalidNodeRegistration(\"Duplicite node registration of '%s'. There is already %s\" %(\n            op_code, CALC_NODES[op_code]\n        ))\n    CALC_NODES[op_code] = class_reference\ndef register_node(op_code):\n    def decorator(original_class):\n        register_node_now(op_code, original_class)",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "register_node_now",
        "kind": 2,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "def register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:\n        raise InvalidNodeRegistration(\"Duplicite node registration of '%s'. There is already %s\" %(\n            op_code, CALC_NODES[op_code]\n        ))\n    CALC_NODES[op_code] = class_reference\ndef register_node(op_code):\n    def decorator(original_class):\n        register_node_now(op_code, original_class)\n        return original_class",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "register_node",
        "kind": 2,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "def register_node(op_code):\n    def decorator(original_class):\n        register_node_now(op_code, original_class)\n        return original_class\n    return decorator\ndef get_class_from_opcode(op_code):\n    if op_code not in CALC_NODES: raise OpCodeNotRegistered(\"OpCode '%d' is not registered\" % op_code)\n    return CALC_NODES[op_code]\n# import all nodes and register them\nfrom examples.example_calculator.nodes import *",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "get_class_from_opcode",
        "kind": 2,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "def get_class_from_opcode(op_code):\n    if op_code not in CALC_NODES: raise OpCodeNotRegistered(\"OpCode '%d' is not registered\" % op_code)\n    return CALC_NODES[op_code]\n# import all nodes and register them\nfrom examples.example_calculator.nodes import *",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "LISTBOX_MIMETYPE",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "LISTBOX_MIMETYPE = \"application/x-item\"\nOP_NODE_INPUT = 1\nOP_NODE_OUTPUT = 2\nOP_NODE_ADD = 3\nOP_NODE_SUB = 4\nOP_NODE_MUL = 5\nOP_NODE_DIV = 6\nCALC_NODES = {\n}\nclass ConfException(Exception): pass",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "OP_NODE_INPUT",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "OP_NODE_INPUT = 1\nOP_NODE_OUTPUT = 2\nOP_NODE_ADD = 3\nOP_NODE_SUB = 4\nOP_NODE_MUL = 5\nOP_NODE_DIV = 6\nCALC_NODES = {\n}\nclass ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "OP_NODE_OUTPUT",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "OP_NODE_OUTPUT = 2\nOP_NODE_ADD = 3\nOP_NODE_SUB = 4\nOP_NODE_MUL = 5\nOP_NODE_DIV = 6\nCALC_NODES = {\n}\nclass ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "OP_NODE_ADD",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "OP_NODE_ADD = 3\nOP_NODE_SUB = 4\nOP_NODE_MUL = 5\nOP_NODE_DIV = 6\nCALC_NODES = {\n}\nclass ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "OP_NODE_SUB",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "OP_NODE_SUB = 4\nOP_NODE_MUL = 5\nOP_NODE_DIV = 6\nCALC_NODES = {\n}\nclass ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "OP_NODE_MUL",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "OP_NODE_MUL = 5\nOP_NODE_DIV = 6\nCALC_NODES = {\n}\nclass ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:\n        raise InvalidNodeRegistration(\"Duplicite node registration of '%s'. There is already %s\" %(",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "OP_NODE_DIV",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "OP_NODE_DIV = 6\nCALC_NODES = {\n}\nclass ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:\n        raise InvalidNodeRegistration(\"Duplicite node registration of '%s'. There is already %s\" %(\n            op_code, CALC_NODES[op_code]",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "CALC_NODES",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_conf",
        "description": "lib.core.node.examples.example_calculator.calc_conf",
        "peekOfCode": "CALC_NODES = {\n}\nclass ConfException(Exception): pass\nclass InvalidNodeRegistration(ConfException): pass\nclass OpCodeNotRegistered(ConfException): pass\ndef register_node_now(op_code, class_reference):\n    if op_code in CALC_NODES:\n        raise InvalidNodeRegistration(\"Duplicite node registration of '%s'. There is already %s\" %(\n            op_code, CALC_NODES[op_code]\n        ))",
        "detail": "lib.core.node.examples.example_calculator.calc_conf",
        "documentation": {}
    },
    {
        "label": "QDMDragListbox",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_drag_listbox",
        "description": "lib.core.node.examples.example_calculator.calc_drag_listbox",
        "peekOfCode": "class QDMDragListbox(QListWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.initUI()\n    def initUI(self):\n        # init\n        self.setIconSize(QSize(32, 32))\n        self.setSelectionMode(QAbstractItemView.SingleSelection)\n        self.setDragEnabled(True)\n        self.addMyItems()",
        "detail": "lib.core.node.examples.example_calculator.calc_drag_listbox",
        "documentation": {}
    },
    {
        "label": "CalcGraphicsNode",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_node_base",
        "description": "lib.core.node.examples.example_calculator.calc_node_base",
        "peekOfCode": "class CalcGraphicsNode(QDMGraphicsNode):\n    def initSizes(self):\n        super().initSizes()\n        self.width = 160\n        self.height = 74\n        self.edge_roundness = 6\n        self.edge_padding = 0\n        self.title_horizontal_padding = 8\n        self.title_vertical_padding = 10\n    def initAssets(self):",
        "detail": "lib.core.node.examples.example_calculator.calc_node_base",
        "documentation": {}
    },
    {
        "label": "CalcContent",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_node_base",
        "description": "lib.core.node.examples.example_calculator.calc_node_base",
        "peekOfCode": "class CalcContent(QDMNodeContentWidget):\n    def initUI(self):\n        lbl = QLabel(self.node.content_label, self)\n        lbl.setObjectName(self.node.content_label_objname)\nclass CalcNode(Node):\n    icon = \"\"\n    op_code = 0\n    op_title = \"Undefined\"\n    content_label = \"\"\n    content_label_objname = \"calc_node_bg\"",
        "detail": "lib.core.node.examples.example_calculator.calc_node_base",
        "documentation": {}
    },
    {
        "label": "CalcNode",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_node_base",
        "description": "lib.core.node.examples.example_calculator.calc_node_base",
        "peekOfCode": "class CalcNode(Node):\n    icon = \"\"\n    op_code = 0\n    op_title = \"Undefined\"\n    content_label = \"\"\n    content_label_objname = \"calc_node_bg\"\n    GraphicsNode_class = CalcGraphicsNode\n    NodeContent_class = CalcContent\n    def __init__(self, scene, inputs=[2,2], outputs=[1]):\n        super().__init__(scene, self.__class__.op_title, inputs, outputs)",
        "detail": "lib.core.node.examples.example_calculator.calc_node_base",
        "documentation": {}
    },
    {
        "label": "CalculatorSubWindow",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_sub_window",
        "description": "lib.core.node.examples.example_calculator.calc_sub_window",
        "peekOfCode": "class CalculatorSubWindow(NodeEditorWidget):\n    def __init__(self):\n        super().__init__()\n        # self.setAttribute(Qt.WA_DeleteOnClose)\n        self.setTitle()\n        self.initNewNodeActions()\n        self.scene.addHasBeenModifiedListener(self.setTitle)\n        self.scene.history.addHistoryRestoredListener(self.onHistoryRestored)\n        self.scene.addDragEnterListener(self.onDragEnter)\n        self.scene.addDropListener(self.onDrop)",
        "detail": "lib.core.node.examples.example_calculator.calc_sub_window",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_sub_window",
        "description": "lib.core.node.examples.example_calculator.calc_sub_window",
        "peekOfCode": "DEBUG = False\nDEBUG_CONTEXT = False\nclass CalculatorSubWindow(NodeEditorWidget):\n    def __init__(self):\n        super().__init__()\n        # self.setAttribute(Qt.WA_DeleteOnClose)\n        self.setTitle()\n        self.initNewNodeActions()\n        self.scene.addHasBeenModifiedListener(self.setTitle)\n        self.scene.history.addHistoryRestoredListener(self.onHistoryRestored)",
        "detail": "lib.core.node.examples.example_calculator.calc_sub_window",
        "documentation": {}
    },
    {
        "label": "DEBUG_CONTEXT",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_sub_window",
        "description": "lib.core.node.examples.example_calculator.calc_sub_window",
        "peekOfCode": "DEBUG_CONTEXT = False\nclass CalculatorSubWindow(NodeEditorWidget):\n    def __init__(self):\n        super().__init__()\n        # self.setAttribute(Qt.WA_DeleteOnClose)\n        self.setTitle()\n        self.initNewNodeActions()\n        self.scene.addHasBeenModifiedListener(self.setTitle)\n        self.scene.history.addHistoryRestoredListener(self.onHistoryRestored)\n        self.scene.addDragEnterListener(self.onDragEnter)",
        "detail": "lib.core.node.examples.example_calculator.calc_sub_window",
        "documentation": {}
    },
    {
        "label": "CalculatorWindow",
        "kind": 6,
        "importPath": "lib.core.node.examples.example_calculator.calc_window",
        "description": "lib.core.node.examples.example_calculator.calc_window",
        "peekOfCode": "class CalculatorWindow(NodeEditorWindow):\n    def initUI(self):\n        self.name_company = 'Blenderfreak'\n        self.name_product = 'Calculator NodeEditor'\n        self.stylesheet_filename = os.path.join(os.path.dirname(__file__), \"qss/nodeeditor.qss\")\n        loadStylesheets(\n            os.path.join(os.path.dirname(__file__), \"qss/nodeeditor-dark.qss\"),\n            self.stylesheet_filename\n        )\n        self.empty_icon = QIcon(\".\")",
        "detail": "lib.core.node.examples.example_calculator.calc_window",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.examples.example_calculator.calc_window",
        "description": "lib.core.node.examples.example_calculator.calc_window",
        "peekOfCode": "DEBUG = False\nclass CalculatorWindow(NodeEditorWindow):\n    def initUI(self):\n        self.name_company = 'Blenderfreak'\n        self.name_product = 'Calculator NodeEditor'\n        self.stylesheet_filename = os.path.join(os.path.dirname(__file__), \"qss/nodeeditor.qss\")\n        loadStylesheets(\n            os.path.join(os.path.dirname(__file__), \"qss/nodeeditor-dark.qss\"),\n            self.stylesheet_filename\n        )",
        "detail": "lib.core.node.examples.example_calculator.calc_window",
        "documentation": {}
    },
    {
        "label": "QDMNodeContentWidget",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_content_widget",
        "description": "lib.core.node.nodeeditor.node_content_widget",
        "peekOfCode": "class QDMNodeContentWidget(QWidget, Serializable):\n    \"\"\"Base class for representation of the Node's graphics content. This class also provides layout\n    for other widgets inside of a :py:class:`~nodeeditor.node_node.Node`\"\"\"\n    def __init__(self, node:'Node', parent:QWidget=None):\n        \"\"\"\n        :param node: reference to the :py:class:`~nodeeditor.node_node.Node`\n        :type node: :py:class:`~nodeeditor.node_node.Node`\n        :param parent: parent widget\n        :type parent: QWidget\n        :Instance Attributes:",
        "detail": "lib.core.node.nodeeditor.node_content_widget",
        "documentation": {}
    },
    {
        "label": "QDMTextEdit",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_content_widget",
        "description": "lib.core.node.nodeeditor.node_content_widget",
        "peekOfCode": "class QDMTextEdit(QTextEdit):\n    \"\"\"\n        .. note::\n            This class is example of ``QTextEdit`` modification to be able to handle `Delete` key with overriden\n            Qt's ``keyPressEvent`` (when not using ``QActions`` in menu or toolbar)\n        Overriden ``QTextEdit`` which sends notification about being edited to parent's container :py:class:`QDMNodeContentWidget`\n    \"\"\"\n    def focusInEvent(self, event:'QFocusEvent'):\n        \"\"\"Example of overriden focusInEvent to mark start of editing\n        :param event: Qt's focus event",
        "detail": "lib.core.node.nodeeditor.node_content_widget",
        "documentation": {}
    },
    {
        "label": "Edge",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_edge",
        "description": "lib.core.node.nodeeditor.node_edge",
        "peekOfCode": "class Edge(Serializable):\n    \"\"\"\n    Class for representing Edge in NodeEditor.\n    \"\"\"\n    def __init__(self, scene:'Scene', start_socket:'Socket'=None, end_socket:'Socket'=None, edge_type=EDGE_TYPE_DIRECT):\n        \"\"\"\n        :param scene: Reference to the :py:class:`~nodeeditor.node_scene.Scene`\n        :type scene: :py:class:`~nodeeditor.node_scene.Scene`\n        :param start_socket: Reference to the starting socket\n        :type start_socket: :py:class:`~nodeeditor.node_socket.Socket`",
        "detail": "lib.core.node.nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "EDGE_TYPE_DIRECT",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_edge",
        "description": "lib.core.node.nodeeditor.node_edge",
        "peekOfCode": "EDGE_TYPE_DIRECT = 1        #:\nEDGE_TYPE_BEZIER = 2        #:\nDEBUG = False\nclass Edge(Serializable):\n    \"\"\"\n    Class for representing Edge in NodeEditor.\n    \"\"\"\n    def __init__(self, scene:'Scene', start_socket:'Socket'=None, end_socket:'Socket'=None, edge_type=EDGE_TYPE_DIRECT):\n        \"\"\"\n        :param scene: Reference to the :py:class:`~nodeeditor.node_scene.Scene`",
        "detail": "lib.core.node.nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "EDGE_TYPE_BEZIER",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_edge",
        "description": "lib.core.node.nodeeditor.node_edge",
        "peekOfCode": "EDGE_TYPE_BEZIER = 2        #:\nDEBUG = False\nclass Edge(Serializable):\n    \"\"\"\n    Class for representing Edge in NodeEditor.\n    \"\"\"\n    def __init__(self, scene:'Scene', start_socket:'Socket'=None, end_socket:'Socket'=None, edge_type=EDGE_TYPE_DIRECT):\n        \"\"\"\n        :param scene: Reference to the :py:class:`~nodeeditor.node_scene.Scene`\n        :type scene: :py:class:`~nodeeditor.node_scene.Scene`",
        "detail": "lib.core.node.nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_edge",
        "description": "lib.core.node.nodeeditor.node_edge",
        "peekOfCode": "DEBUG = False\nclass Edge(Serializable):\n    \"\"\"\n    Class for representing Edge in NodeEditor.\n    \"\"\"\n    def __init__(self, scene:'Scene', start_socket:'Socket'=None, end_socket:'Socket'=None, edge_type=EDGE_TYPE_DIRECT):\n        \"\"\"\n        :param scene: Reference to the :py:class:`~nodeeditor.node_scene.Scene`\n        :type scene: :py:class:`~nodeeditor.node_scene.Scene`\n        :param start_socket: Reference to the starting socket",
        "detail": "lib.core.node.nodeeditor.node_edge",
        "documentation": {}
    },
    {
        "label": "NodeEditorWidget",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_editor_widget",
        "description": "lib.core.node.nodeeditor.node_editor_widget",
        "peekOfCode": "class NodeEditorWidget(QWidget):\n    Scene_class = Scene\n    \"\"\"The ``NodeEditorWidget`` class\"\"\"\n    def __init__(self, parent:QWidget=None):\n        \"\"\"\n        :param parent: parent widget\n        :type parent: ``QWidget``\n        :Instance Attributes:\n        - **filename** - currently graph's filename or ``None``\n        \"\"\"",
        "detail": "lib.core.node.nodeeditor.node_editor_widget",
        "documentation": {}
    },
    {
        "label": "NodeEditorWindow",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_editor_window",
        "description": "lib.core.node.nodeeditor.node_editor_window",
        "peekOfCode": "class NodeEditorWindow(QMainWindow):\n    NodeEditorWidget_class = NodeEditorWidget\n    \"\"\"Class representing NodeEditor's Main Window\"\"\"\n    def __init__(self):\n        \"\"\"\n        :Instance Attributes:\n        - **name_company** - name of the company, used for permanent profile settings\n        - **name_product** - name of this App, used for permanent profile settings\n        \"\"\"\n        super().__init__()",
        "detail": "lib.core.node.nodeeditor.node_editor_window",
        "documentation": {}
    },
    {
        "label": "QDMCutLine",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_cutline",
        "description": "lib.core.node.nodeeditor.node_graphics_cutline",
        "peekOfCode": "class QDMCutLine(QGraphicsItem):\n    \"\"\"Class representing Cutting Line used for cutting multiple `Edges` with one stroke\"\"\"\n    def __init__(self, parent:QWidget=None):\n        \"\"\"\n        :param parent: parent widget\n        :type parent: ``QWidget``\n        \"\"\"\n        super().__init__(parent)\n        self.line_points = []\n        self._pen = QPen(Qt.white)",
        "detail": "lib.core.node.nodeeditor.node_graphics_cutline",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsEdge",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_edge",
        "description": "lib.core.node.nodeeditor.node_graphics_edge",
        "peekOfCode": "class QDMGraphicsEdge(QGraphicsPathItem):\n    \"\"\"Base class for Graphics Edge\"\"\"\n    def __init__(self, edge:'Edge', parent:QWidget=None):\n        \"\"\"\n        :param edge: reference to :class:`~nodeeditor.node_edge.Edge`\n        :type edge: :class:`~nodeeditor.node_edge.Edge`\n        :param parent: parent widget\n        :type parent: ``QWidget``\n        :Instance attributes:\n            - **edge** - reference to :class:`~nodeeditor.node_edge.Edge`",
        "detail": "lib.core.node.nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsEdgeDirect",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_edge",
        "description": "lib.core.node.nodeeditor.node_graphics_edge",
        "peekOfCode": "class QDMGraphicsEdgeDirect(QDMGraphicsEdge):\n    \"\"\"Direct line connection Graphics Edge\"\"\"\n    def calcPath(self) -> QPainterPath:\n        \"\"\"Calculate the Direct line connection\n        :returns: ``QPainterPath`` of the direct line\n        :rtype: ``QPainterPath``\n        \"\"\"\n        path = QPainterPath(QPointF(self.posSource[0], self.posSource[1]))\n        path.lineTo(self.posDestination[0], self.posDestination[1])\n        return path",
        "detail": "lib.core.node.nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsEdgeBezier",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_edge",
        "description": "lib.core.node.nodeeditor.node_graphics_edge",
        "peekOfCode": "class QDMGraphicsEdgeBezier(QDMGraphicsEdge):\n    \"\"\"Cubic line connection Graphics Edge\"\"\"\n    def calcPath(self) -> QPainterPath:\n        \"\"\"Calculate the cubic Bezier line connection with 2 control points\n        :returns: ``QPainterPath`` of the cubic Bezier line\n        :rtype: ``QPainterPath``\n        \"\"\"\n        s = self.posSource\n        d = self.posDestination\n        dist = (d[0] - s[0]) * 0.5",
        "detail": "lib.core.node.nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "EDGE_CP_ROUNDNESS",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_edge",
        "description": "lib.core.node.nodeeditor.node_graphics_edge",
        "peekOfCode": "EDGE_CP_ROUNDNESS = 100     #: Bezier controll point distance on the line\nclass QDMGraphicsEdge(QGraphicsPathItem):\n    \"\"\"Base class for Graphics Edge\"\"\"\n    def __init__(self, edge:'Edge', parent:QWidget=None):\n        \"\"\"\n        :param edge: reference to :class:`~nodeeditor.node_edge.Edge`\n        :type edge: :class:`~nodeeditor.node_edge.Edge`\n        :param parent: parent widget\n        :type parent: ``QWidget``\n        :Instance attributes:",
        "detail": "lib.core.node.nodeeditor.node_graphics_edge",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsNode",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_node",
        "description": "lib.core.node.nodeeditor.node_graphics_node",
        "peekOfCode": "class QDMGraphicsNode(QGraphicsItem):\n    \"\"\"Class describing Graphics representation of :class:`~nodeeditor.node_node.Node`\"\"\"\n    def __init__(self, node:'Node', parent:QWidget=None):\n        \"\"\"\n        :param node: reference to :class:`~nodeeditor.node_node.Node`\n        :type node: :class:`~nodeeditor.node_node.Node`\n        :param parent: parent widget\n        :type parent: QWidget\n        :Instance Attributes:\n            - **node** - reference to :class:`~nodeeditor.node_node.Node`",
        "detail": "lib.core.node.nodeeditor.node_graphics_node",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsScene",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_scene",
        "description": "lib.core.node.nodeeditor.node_graphics_scene",
        "peekOfCode": "class QDMGraphicsScene(QGraphicsScene):\n    \"\"\"Class representing Graphic of :class:`~nodeeditor.node_scene.Scene`\"\"\"\n    #: pyqtSignal emitted when some item is selected in the `Scene`\n    itemSelected = pyqtSignal()\n    #: pyqtSignal emitted when items are deselected in the `Scene`\n    itemsDeselected = pyqtSignal()\n    def __init__(self, scene:'Scene', parent:QWidget=None):\n        \"\"\"\n        :param scene: reference to the :class:`~nodeeditor.node_scene.Scene`\n        :type scene: :class:`~nodeeditor.node_scene.Scene`",
        "detail": "lib.core.node.nodeeditor.node_graphics_scene",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsSocket",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_socket",
        "description": "lib.core.node.nodeeditor.node_graphics_socket",
        "peekOfCode": "class QDMGraphicsSocket(QGraphicsItem):\n    \"\"\"Class representing Graphic `Socket` in ``QGraphicsScene``\"\"\"\n    def __init__(self, socket:'Socket'):\n        \"\"\"\n        :param socket: reference to :class:`~nodeeditor.node_socket.Socket`\n        :type socket: :class:`~nodeeditor.node_socket.Socket`\n        \"\"\"\n        super().__init__(socket.node.grNode)\n        self.socket = socket\n        self.isHighlighted = False",
        "detail": "lib.core.node.nodeeditor.node_graphics_socket",
        "documentation": {}
    },
    {
        "label": "SOCKET_COLORS",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_socket",
        "description": "lib.core.node.nodeeditor.node_graphics_socket",
        "peekOfCode": "SOCKET_COLORS = [\n    QColor(\"#FFFF7700\"),\n    QColor(\"#FF52e220\"),\n    QColor(\"#FF0056a6\"),\n    QColor(\"#FFa86db1\"),\n    QColor(\"#FFb54747\"),\n    QColor(\"#FFdbe220\"),\n    QColor(\"#FF888888\"),\n]\nclass QDMGraphicsSocket(QGraphicsItem):",
        "detail": "lib.core.node.nodeeditor.node_graphics_socket",
        "documentation": {}
    },
    {
        "label": "QDMGraphicsView",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_graphics_view",
        "description": "lib.core.node.nodeeditor.node_graphics_view",
        "peekOfCode": "class QDMGraphicsView(QGraphicsView):\n    \"\"\"Class representing NodeEditor's `Graphics View`\"\"\"\n    #: pyqtSignal emitted when cursor position on the `Scene` has changed\n    scenePosChanged = pyqtSignal(int, int)\n    def __init__(self, grScene:'QDMGraphicsScene', parent:'QWidget'=None):\n        \"\"\"\n        :param grScene: reference to the :class:`~nodeeditor.node_graphics_scene.QDMGraphicsScene`\n        :type grScene: :class:`~nodeeditor.node_graphics_scene.QDMGraphicsScene`\n        :param parent: parent widget\n        :type parent: ``QWidget``",
        "detail": "lib.core.node.nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "MODE_NOOP",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_view",
        "description": "lib.core.node.nodeeditor.node_graphics_view",
        "peekOfCode": "MODE_NOOP = 1               #: Mode representing ready state\nMODE_EDGE_DRAG = 2          #: Mode representing when we drag edge state\nMODE_EDGE_CUT = 3           #: Mode representing when we draw a cutting edge\n#: Distance when click on socket to enable `Drag Edge`\nEDGE_DRAG_START_THRESHOLD = 50\nDEBUG = False\nDEBUG_MMB_SCENE_ITEMS = False\nclass QDMGraphicsView(QGraphicsView):\n    \"\"\"Class representing NodeEditor's `Graphics View`\"\"\"\n    #: pyqtSignal emitted when cursor position on the `Scene` has changed",
        "detail": "lib.core.node.nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "MODE_EDGE_DRAG",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_view",
        "description": "lib.core.node.nodeeditor.node_graphics_view",
        "peekOfCode": "MODE_EDGE_DRAG = 2          #: Mode representing when we drag edge state\nMODE_EDGE_CUT = 3           #: Mode representing when we draw a cutting edge\n#: Distance when click on socket to enable `Drag Edge`\nEDGE_DRAG_START_THRESHOLD = 50\nDEBUG = False\nDEBUG_MMB_SCENE_ITEMS = False\nclass QDMGraphicsView(QGraphicsView):\n    \"\"\"Class representing NodeEditor's `Graphics View`\"\"\"\n    #: pyqtSignal emitted when cursor position on the `Scene` has changed\n    scenePosChanged = pyqtSignal(int, int)",
        "detail": "lib.core.node.nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "MODE_EDGE_CUT",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_view",
        "description": "lib.core.node.nodeeditor.node_graphics_view",
        "peekOfCode": "MODE_EDGE_CUT = 3           #: Mode representing when we draw a cutting edge\n#: Distance when click on socket to enable `Drag Edge`\nEDGE_DRAG_START_THRESHOLD = 50\nDEBUG = False\nDEBUG_MMB_SCENE_ITEMS = False\nclass QDMGraphicsView(QGraphicsView):\n    \"\"\"Class representing NodeEditor's `Graphics View`\"\"\"\n    #: pyqtSignal emitted when cursor position on the `Scene` has changed\n    scenePosChanged = pyqtSignal(int, int)\n    def __init__(self, grScene:'QDMGraphicsScene', parent:'QWidget'=None):",
        "detail": "lib.core.node.nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "EDGE_DRAG_START_THRESHOLD",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_view",
        "description": "lib.core.node.nodeeditor.node_graphics_view",
        "peekOfCode": "EDGE_DRAG_START_THRESHOLD = 50\nDEBUG = False\nDEBUG_MMB_SCENE_ITEMS = False\nclass QDMGraphicsView(QGraphicsView):\n    \"\"\"Class representing NodeEditor's `Graphics View`\"\"\"\n    #: pyqtSignal emitted when cursor position on the `Scene` has changed\n    scenePosChanged = pyqtSignal(int, int)\n    def __init__(self, grScene:'QDMGraphicsScene', parent:'QWidget'=None):\n        \"\"\"\n        :param grScene: reference to the :class:`~nodeeditor.node_graphics_scene.QDMGraphicsScene`",
        "detail": "lib.core.node.nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_view",
        "description": "lib.core.node.nodeeditor.node_graphics_view",
        "peekOfCode": "DEBUG = False\nDEBUG_MMB_SCENE_ITEMS = False\nclass QDMGraphicsView(QGraphicsView):\n    \"\"\"Class representing NodeEditor's `Graphics View`\"\"\"\n    #: pyqtSignal emitted when cursor position on the `Scene` has changed\n    scenePosChanged = pyqtSignal(int, int)\n    def __init__(self, grScene:'QDMGraphicsScene', parent:'QWidget'=None):\n        \"\"\"\n        :param grScene: reference to the :class:`~nodeeditor.node_graphics_scene.QDMGraphicsScene`\n        :type grScene: :class:`~nodeeditor.node_graphics_scene.QDMGraphicsScene`",
        "detail": "lib.core.node.nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "DEBUG_MMB_SCENE_ITEMS",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_graphics_view",
        "description": "lib.core.node.nodeeditor.node_graphics_view",
        "peekOfCode": "DEBUG_MMB_SCENE_ITEMS = False\nclass QDMGraphicsView(QGraphicsView):\n    \"\"\"Class representing NodeEditor's `Graphics View`\"\"\"\n    #: pyqtSignal emitted when cursor position on the `Scene` has changed\n    scenePosChanged = pyqtSignal(int, int)\n    def __init__(self, grScene:'QDMGraphicsScene', parent:'QWidget'=None):\n        \"\"\"\n        :param grScene: reference to the :class:`~nodeeditor.node_graphics_scene.QDMGraphicsScene`\n        :type grScene: :class:`~nodeeditor.node_graphics_scene.QDMGraphicsScene`\n        :param parent: parent widget",
        "detail": "lib.core.node.nodeeditor.node_graphics_view",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_node",
        "description": "lib.core.node.nodeeditor.node_node",
        "peekOfCode": "class Node(Serializable):\n    \"\"\"\n    Class representing `Node` in the `Scene`.\n    \"\"\"\n    GraphicsNode_class = QDMGraphicsNode\n    NodeContent_class = QDMNodeContentWidget\n    Socket_class = Socket\n    def __init__(self, scene:'Scene', title:str=\"Undefined Node\", inputs:list=[], outputs:list=[]):\n        \"\"\"\n        :param scene: reference to the :class:`~nodeeditor.node_scene.Scene`",
        "detail": "lib.core.node.nodeeditor.node_node",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_node",
        "description": "lib.core.node.nodeeditor.node_node",
        "peekOfCode": "DEBUG = False\nclass Node(Serializable):\n    \"\"\"\n    Class representing `Node` in the `Scene`.\n    \"\"\"\n    GraphicsNode_class = QDMGraphicsNode\n    NodeContent_class = QDMNodeContentWidget\n    Socket_class = Socket\n    def __init__(self, scene:'Scene', title:str=\"Undefined Node\", inputs:list=[], outputs:list=[]):\n        \"\"\"",
        "detail": "lib.core.node.nodeeditor.node_node",
        "documentation": {}
    },
    {
        "label": "InvalidFile",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_scene",
        "description": "lib.core.node.nodeeditor.node_scene",
        "peekOfCode": "class InvalidFile(Exception): pass\nclass Scene(Serializable):\n    \"\"\"Class representing NodeEditor's `Scene`\"\"\"\n    def __init__(self):\n        \"\"\"\n        :Instance Attributes:\n            - **nodes** - list of `Nodes` in this `Scene`\n            - **edges** - list of `Edges` in this `Scene`\n            - **history** - Instance of :class:`~nodeeditor.node_scene_history.SceneHistory`\n            - **clipboard** - Instance of :class:`~nodeeditor.node_scene_clipboard.SceneClipboard`",
        "detail": "lib.core.node.nodeeditor.node_scene",
        "documentation": {}
    },
    {
        "label": "Scene",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_scene",
        "description": "lib.core.node.nodeeditor.node_scene",
        "peekOfCode": "class Scene(Serializable):\n    \"\"\"Class representing NodeEditor's `Scene`\"\"\"\n    def __init__(self):\n        \"\"\"\n        :Instance Attributes:\n            - **nodes** - list of `Nodes` in this `Scene`\n            - **edges** - list of `Edges` in this `Scene`\n            - **history** - Instance of :class:`~nodeeditor.node_scene_history.SceneHistory`\n            - **clipboard** - Instance of :class:`~nodeeditor.node_scene_clipboard.SceneClipboard`\n            - **scene_width** - width of this `Scene` in pixels",
        "detail": "lib.core.node.nodeeditor.node_scene",
        "documentation": {}
    },
    {
        "label": "DEBUG_REMOVE_WARNINGS",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_scene",
        "description": "lib.core.node.nodeeditor.node_scene",
        "peekOfCode": "DEBUG_REMOVE_WARNINGS = False\nclass InvalidFile(Exception): pass\nclass Scene(Serializable):\n    \"\"\"Class representing NodeEditor's `Scene`\"\"\"\n    def __init__(self):\n        \"\"\"\n        :Instance Attributes:\n            - **nodes** - list of `Nodes` in this `Scene`\n            - **edges** - list of `Edges` in this `Scene`\n            - **history** - Instance of :class:`~nodeeditor.node_scene_history.SceneHistory`",
        "detail": "lib.core.node.nodeeditor.node_scene",
        "documentation": {}
    },
    {
        "label": "SceneClipboard",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_scene_clipboard",
        "description": "lib.core.node.nodeeditor.node_scene_clipboard",
        "peekOfCode": "class SceneClipboard():\n    \"\"\"\n    Class contains all the code for serialization/deserialization from Clipboard\n    \"\"\"\n    def __init__(self, scene:'Scene'):\n        \"\"\"\n        :param scene: Reference to the :class:`~nodeeditor.node_scene.Scene`\n        :type scene: :class:`~nodeeditor.node_scene.Scene`\n        :Instance Attributes:\n        - **scene** - reference to the :class:`~nodeeditor.node_scene.Scene`",
        "detail": "lib.core.node.nodeeditor.node_scene_clipboard",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_scene_clipboard",
        "description": "lib.core.node.nodeeditor.node_scene_clipboard",
        "peekOfCode": "DEBUG = False\nDEBUG_PASTING = False\nclass SceneClipboard():\n    \"\"\"\n    Class contains all the code for serialization/deserialization from Clipboard\n    \"\"\"\n    def __init__(self, scene:'Scene'):\n        \"\"\"\n        :param scene: Reference to the :class:`~nodeeditor.node_scene.Scene`\n        :type scene: :class:`~nodeeditor.node_scene.Scene`",
        "detail": "lib.core.node.nodeeditor.node_scene_clipboard",
        "documentation": {}
    },
    {
        "label": "DEBUG_PASTING",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_scene_clipboard",
        "description": "lib.core.node.nodeeditor.node_scene_clipboard",
        "peekOfCode": "DEBUG_PASTING = False\nclass SceneClipboard():\n    \"\"\"\n    Class contains all the code for serialization/deserialization from Clipboard\n    \"\"\"\n    def __init__(self, scene:'Scene'):\n        \"\"\"\n        :param scene: Reference to the :class:`~nodeeditor.node_scene.Scene`\n        :type scene: :class:`~nodeeditor.node_scene.Scene`\n        :Instance Attributes:",
        "detail": "lib.core.node.nodeeditor.node_scene_clipboard",
        "documentation": {}
    },
    {
        "label": "SceneHistory",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_scene_history",
        "description": "lib.core.node.nodeeditor.node_scene_history",
        "peekOfCode": "class SceneHistory():\n    \"\"\"Class contains all the code for undo/redo operations\"\"\"\n    def __init__(self, scene:'Scene'):\n        \"\"\"\n        :param scene: Reference to the :class:`~nodeeditor.node_scene.Scene`\n        :type scene: :class:`~nodeeditor.node_scene.Scene`\n        :Instance Attributes:\n        - **scene** - reference to the :class:`~nodeeditor.node_scene.Scene`\n        - **history_limit** - number of history steps that can be stored\n        \"\"\"",
        "detail": "lib.core.node.nodeeditor.node_scene_history",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_scene_history",
        "description": "lib.core.node.nodeeditor.node_scene_history",
        "peekOfCode": "DEBUG = False\nDEBUG_SELECTION = False\nclass SceneHistory():\n    \"\"\"Class contains all the code for undo/redo operations\"\"\"\n    def __init__(self, scene:'Scene'):\n        \"\"\"\n        :param scene: Reference to the :class:`~nodeeditor.node_scene.Scene`\n        :type scene: :class:`~nodeeditor.node_scene.Scene`\n        :Instance Attributes:\n        - **scene** - reference to the :class:`~nodeeditor.node_scene.Scene`",
        "detail": "lib.core.node.nodeeditor.node_scene_history",
        "documentation": {}
    },
    {
        "label": "DEBUG_SELECTION",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_scene_history",
        "description": "lib.core.node.nodeeditor.node_scene_history",
        "peekOfCode": "DEBUG_SELECTION = False\nclass SceneHistory():\n    \"\"\"Class contains all the code for undo/redo operations\"\"\"\n    def __init__(self, scene:'Scene'):\n        \"\"\"\n        :param scene: Reference to the :class:`~nodeeditor.node_scene.Scene`\n        :type scene: :class:`~nodeeditor.node_scene.Scene`\n        :Instance Attributes:\n        - **scene** - reference to the :class:`~nodeeditor.node_scene.Scene`\n        - **history_limit** - number of history steps that can be stored",
        "detail": "lib.core.node.nodeeditor.node_scene_history",
        "documentation": {}
    },
    {
        "label": "Serializable",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_serializable",
        "description": "lib.core.node.nodeeditor.node_serializable",
        "peekOfCode": "class Serializable():\n    def __init__(self):\n        \"\"\"\n        Default constructor automatically creates data which are common to any serializable object.\n        In our case we create ``self.id`` which we use in every object in NodeEditor.\n        \"\"\"\n        self.id = id(self)\n    def serialize(self) -> OrderedDict:\n        \"\"\"\n        Serialization method to serialize this class data into ``OrderedDict`` which can be stored",
        "detail": "lib.core.node.nodeeditor.node_serializable",
        "documentation": {}
    },
    {
        "label": "Socket",
        "kind": 6,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "class Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket\n    \"\"\"Class representing Socket.\"\"\"\n    def __init__(self, node:'Node', index:int=0, position:int=LEFT_TOP, socket_type:int=1, multi_edges:bool=True, count_on_this_node_side:int=1, is_input:bool=False):\n        \"\"\"\n        :param node: reference to the :class:`~nodeeditor.node_node.Node` containing this `Socket`\n        :type node: :class:`~nodeeditor.node_node.Node`\n        :param index: Current index of this socket in the position\n        :type index: ``int``\n        :param position: Socket position. See :ref:`socket-position-constants`",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "LEFT_TOP",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "LEFT_TOP = 1        #:\nLEFT_CENTER =2      #:\nLEFT_BOTTOM = 3     #:\nRIGHT_TOP = 4       #:\nRIGHT_CENTER = 5    #:\nRIGHT_BOTTOM = 6    #:\nDEBUG = False\nDEBUG_REMOVE_WARNINGS = False\nclass Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "LEFT_BOTTOM",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "LEFT_BOTTOM = 3     #:\nRIGHT_TOP = 4       #:\nRIGHT_CENTER = 5    #:\nRIGHT_BOTTOM = 6    #:\nDEBUG = False\nDEBUG_REMOVE_WARNINGS = False\nclass Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket\n    \"\"\"Class representing Socket.\"\"\"\n    def __init__(self, node:'Node', index:int=0, position:int=LEFT_TOP, socket_type:int=1, multi_edges:bool=True, count_on_this_node_side:int=1, is_input:bool=False):",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "RIGHT_TOP",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "RIGHT_TOP = 4       #:\nRIGHT_CENTER = 5    #:\nRIGHT_BOTTOM = 6    #:\nDEBUG = False\nDEBUG_REMOVE_WARNINGS = False\nclass Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket\n    \"\"\"Class representing Socket.\"\"\"\n    def __init__(self, node:'Node', index:int=0, position:int=LEFT_TOP, socket_type:int=1, multi_edges:bool=True, count_on_this_node_side:int=1, is_input:bool=False):\n        \"\"\"",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "RIGHT_CENTER",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "RIGHT_CENTER = 5    #:\nRIGHT_BOTTOM = 6    #:\nDEBUG = False\nDEBUG_REMOVE_WARNINGS = False\nclass Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket\n    \"\"\"Class representing Socket.\"\"\"\n    def __init__(self, node:'Node', index:int=0, position:int=LEFT_TOP, socket_type:int=1, multi_edges:bool=True, count_on_this_node_side:int=1, is_input:bool=False):\n        \"\"\"\n        :param node: reference to the :class:`~nodeeditor.node_node.Node` containing this `Socket`",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "RIGHT_BOTTOM",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "RIGHT_BOTTOM = 6    #:\nDEBUG = False\nDEBUG_REMOVE_WARNINGS = False\nclass Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket\n    \"\"\"Class representing Socket.\"\"\"\n    def __init__(self, node:'Node', index:int=0, position:int=LEFT_TOP, socket_type:int=1, multi_edges:bool=True, count_on_this_node_side:int=1, is_input:bool=False):\n        \"\"\"\n        :param node: reference to the :class:`~nodeeditor.node_node.Node` containing this `Socket`\n        :type node: :class:`~nodeeditor.node_node.Node`",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "DEBUG = False\nDEBUG_REMOVE_WARNINGS = False\nclass Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket\n    \"\"\"Class representing Socket.\"\"\"\n    def __init__(self, node:'Node', index:int=0, position:int=LEFT_TOP, socket_type:int=1, multi_edges:bool=True, count_on_this_node_side:int=1, is_input:bool=False):\n        \"\"\"\n        :param node: reference to the :class:`~nodeeditor.node_node.Node` containing this `Socket`\n        :type node: :class:`~nodeeditor.node_node.Node`\n        :param index: Current index of this socket in the position",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "DEBUG_REMOVE_WARNINGS",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.node_socket",
        "description": "lib.core.node.nodeeditor.node_socket",
        "peekOfCode": "DEBUG_REMOVE_WARNINGS = False\nclass Socket(Serializable):\n    Socket_GR_Class = QDMGraphicsSocket\n    \"\"\"Class representing Socket.\"\"\"\n    def __init__(self, node:'Node', index:int=0, position:int=LEFT_TOP, socket_type:int=1, multi_edges:bool=True, count_on_this_node_side:int=1, is_input:bool=False):\n        \"\"\"\n        :param node: reference to the :class:`~nodeeditor.node_node.Node` containing this `Socket`\n        :type node: :class:`~nodeeditor.node_node.Node`\n        :param index: Current index of this socket in the position\n        :type index: ``int``",
        "detail": "lib.core.node.nodeeditor.node_socket",
        "documentation": {}
    },
    {
        "label": "dumpException",
        "kind": 2,
        "importPath": "lib.core.node.nodeeditor.utils",
        "description": "lib.core.node.nodeeditor.utils",
        "peekOfCode": "def dumpException(e=None):\n    \"\"\"\n    Prints out Exception message with traceback to the console\n    :param e: Exception to print out\n    :type e: Exception\n    \"\"\"\n    # print(\"%s EXCEPTION:\" % e.__class__.__name__, e)\n    # traceback.print_tb(e.__traceback__)\n    traceback.print_exc()\ndef loadStylesheet(filename:str):",
        "detail": "lib.core.node.nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "loadStylesheet",
        "kind": 2,
        "importPath": "lib.core.node.nodeeditor.utils",
        "description": "lib.core.node.nodeeditor.utils",
        "peekOfCode": "def loadStylesheet(filename:str):\n    \"\"\"\n    Loads an qss stylesheet to current QApplication instance\n    :param filename: Filename of qss stylesheet\n    :type filename: str\n    \"\"\"\n    print('STYLE loading:', filename)\n    file = QFile(filename)\n    file.open(QFile.ReadOnly | QFile.Text)\n    stylesheet = file.readAll()",
        "detail": "lib.core.node.nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "loadStylesheets",
        "kind": 2,
        "importPath": "lib.core.node.nodeeditor.utils",
        "description": "lib.core.node.nodeeditor.utils",
        "peekOfCode": "def loadStylesheets(*args):\n    \"\"\"\n    Loads multiple qss stylesheets. Concats them together and applies the final stylesheet to current QApplication instance\n    :param args: variable number of filenames of qss stylesheets\n    :type args: str, str,...\n    \"\"\"\n    res = ''\n    for arg in args:\n        file = QFile(arg)\n        file.open(QFile.ReadOnly | QFile.Text)",
        "detail": "lib.core.node.nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "pp",
        "kind": 5,
        "importPath": "lib.core.node.nodeeditor.utils",
        "description": "lib.core.node.nodeeditor.utils",
        "peekOfCode": "pp = PrettyPrinter(indent=4).pprint\ndef dumpException(e=None):\n    \"\"\"\n    Prints out Exception message with traceback to the console\n    :param e: Exception to print out\n    :type e: Exception\n    \"\"\"\n    # print(\"%s EXCEPTION:\" % e.__class__.__name__, e)\n    # traceback.print_tb(e.__traceback__)\n    traceback.print_exc()",
        "detail": "lib.core.node.nodeeditor.utils",
        "documentation": {}
    },
    {
        "label": "FileHandler",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.FileHandler",
        "description": "lib.core.opengl.Optimizermaster.FileHandler",
        "peekOfCode": "class FileHandler:\n    def __init__(self):\n        pass\n    def load_mesh(self, inputfile):\n        \"\"\"This module loads the content of a 3D file as mesh array.\"\"\"\n        filetype = os.path.splitext(inputfile)[1].lower()\n        if filetype == \".stl\":\n            f = open(inputfile, \"rb\")\n            if \"solid\" in str(f.read(5).lower()):\n                try:",
        "detail": "lib.core.opengl.Optimizermaster.FileHandler",
        "documentation": {}
    },
    {
        "label": "Tweak",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "class Tweak:    \n    \"\"\" The Tweaker is an auto rotate class for 3D objects.\n    The critical angle CA is a variable that can be set by the operator as\n    it may depend on multiple factors such as material used, printing\n     temperature, printing speed, etc.\n    Following attributes of the class are supported:\n    The tweaked z-axis'.\n    Euler coords .v and .phi, where v is orthogonal to both z and z' and phi\n     the angle between z and z' in rad.\n    The rotational matrix .Matrix, the new mesh is created by multiplying each",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "VECTOR_TOL",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "VECTOR_TOL = 0.001  # To remove alignment duplicates, the vector tolerance is \n# used to distinguish two vectors.\nPLAFOND_ADV = 0.2   # Printing a plafond is known to be more effective than\n# very step overhangs. This value sets the advantage in %.\nFIRST_LAY_H = 0.25   # The initial layer of a print has an altitude > 0\n# bottom layer and very bottom-near overhangs can be handled as similar.\nNEGL_FACE_SIZE = 1  # The fast operation mode neglects facet sizes smaller than\n# this value (in mm^2) for a better performance\nABSOLUTE_F = 100    # These values scale the the parameters bottom size,\nRELATIVE_F = 1      # overhang size, and bottom contour lenght to get a robust",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "PLAFOND_ADV",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "PLAFOND_ADV = 0.2   # Printing a plafond is known to be more effective than\n# very step overhangs. This value sets the advantage in %.\nFIRST_LAY_H = 0.25   # The initial layer of a print has an altitude > 0\n# bottom layer and very bottom-near overhangs can be handled as similar.\nNEGL_FACE_SIZE = 1  # The fast operation mode neglects facet sizes smaller than\n# this value (in mm^2) for a better performance\nABSOLUTE_F = 100    # These values scale the the parameters bottom size,\nRELATIVE_F = 1      # overhang size, and bottom contour lenght to get a robust\nCONTOUR_F = 0.5     # value for the Unprintability\nclass Tweak:    ",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "FIRST_LAY_H",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "FIRST_LAY_H = 0.25   # The initial layer of a print has an altitude > 0\n# bottom layer and very bottom-near overhangs can be handled as similar.\nNEGL_FACE_SIZE = 1  # The fast operation mode neglects facet sizes smaller than\n# this value (in mm^2) for a better performance\nABSOLUTE_F = 100    # These values scale the the parameters bottom size,\nRELATIVE_F = 1      # overhang size, and bottom contour lenght to get a robust\nCONTOUR_F = 0.5     # value for the Unprintability\nclass Tweak:    \n    \"\"\" The Tweaker is an auto rotate class for 3D objects.\n    The critical angle CA is a variable that can be set by the operator as",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "NEGL_FACE_SIZE",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "NEGL_FACE_SIZE = 1  # The fast operation mode neglects facet sizes smaller than\n# this value (in mm^2) for a better performance\nABSOLUTE_F = 100    # These values scale the the parameters bottom size,\nRELATIVE_F = 1      # overhang size, and bottom contour lenght to get a robust\nCONTOUR_F = 0.5     # value for the Unprintability\nclass Tweak:    \n    \"\"\" The Tweaker is an auto rotate class for 3D objects.\n    The critical angle CA is a variable that can be set by the operator as\n    it may depend on multiple factors such as material used, printing\n     temperature, printing speed, etc.",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "ABSOLUTE_F",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "ABSOLUTE_F = 100    # These values scale the the parameters bottom size,\nRELATIVE_F = 1      # overhang size, and bottom contour lenght to get a robust\nCONTOUR_F = 0.5     # value for the Unprintability\nclass Tweak:    \n    \"\"\" The Tweaker is an auto rotate class for 3D objects.\n    The critical angle CA is a variable that can be set by the operator as\n    it may depend on multiple factors such as material used, printing\n     temperature, printing speed, etc.\n    Following attributes of the class are supported:\n    The tweaked z-axis'.",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "RELATIVE_F",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "RELATIVE_F = 1      # overhang size, and bottom contour lenght to get a robust\nCONTOUR_F = 0.5     # value for the Unprintability\nclass Tweak:    \n    \"\"\" The Tweaker is an auto rotate class for 3D objects.\n    The critical angle CA is a variable that can be set by the operator as\n    it may depend on multiple factors such as material used, printing\n     temperature, printing speed, etc.\n    Following attributes of the class are supported:\n    The tweaked z-axis'.\n    Euler coords .v and .phi, where v is orthogonal to both z and z' and phi",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "CONTOUR_F",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "description": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "peekOfCode": "CONTOUR_F = 0.5     # value for the Unprintability\nclass Tweak:    \n    \"\"\" The Tweaker is an auto rotate class for 3D objects.\n    The critical angle CA is a variable that can be set by the operator as\n    it may depend on multiple factors such as material used, printing\n     temperature, printing speed, etc.\n    Following attributes of the class are supported:\n    The tweaked z-axis'.\n    Euler coords .v and .phi, where v is orthogonal to both z and z' and phi\n     the angle between z and z' in rad.",
        "detail": "lib.core.opengl.Optimizermaster.MeshTweaker",
        "documentation": {}
    },
    {
        "label": "stlfile",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "class stlfile:\n    originalname = ''\n    tweakedname = ''\n# Get a list of stl files\npath = r\"\"\"C:\\Users\\singers\\Documents\\3D Prints\\Clemson_Coaster\\files\\Dupes\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "STLattributes",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "class STLattributes:\n#     filepath = None\n#     maxx = None\n#     minx = None\n#     maxy = None\n#     miny = None\n#     maxz = None\n#     minz = None\n#     xdif = None\n#     ydif = None",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "find_mins_maxs",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "def find_mins_maxs(obj):\n    minx = maxx = miny = maxy = minz = maxz = None\n    for p in obj.points:\n    # p contains (x, y, z)\n        if minx is None:\n            minx = p[stl.Dimension.X]\n            maxx = p[stl.Dimension.X]\n            miny = p[stl.Dimension.Y]\n            maxy = p[stl.Dimension.Y]\n            minz = p[stl.Dimension.Z]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "path = r\"\"\"C:\\Users\\singers\\Documents\\3D Prints\\Clemson_Coaster\\files\\Dupes\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[4]:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "listOfSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "listOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[4]:\n# Test to see if they are valid by trying to process them with the numpystl library",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "numfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "numfiles = len(listOfSTLfiles)\nvolumeArray =np.empty( shape=(numfiles,1) )\ncount = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "count = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "validSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "validSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:\n       print('error occured')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "AllFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "AllFiles = []\nfor thing in Tweaked:\n    model = STLattributes(thing)\n    AllFiles.append(model)\n# In[2]:\n# Define Build Plate Space\n# width = input('What is the width of the buildplate? ')\n# length = input('What is the length of the buildplate? ')\n# height = input('What is the height of the buildplate? ')\nwidth = 200",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "width = 200\nlength = 250\nheight = 300\nvolume = width*length*height\n# In[3]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "length = 250\nheight = 300\nvolume = width*length*height\n# In[3]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "height = 300\nvolume = width*length*height\n# In[3]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "volume",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "volume = width*length*height\n# In[3]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "FitFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "FitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')\n            if choice[0] == 'R' or 'r':\n                print('Work on this resizing thing later!!!')\n            elif choice[0] == 'E' or 'e':",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "FitFiles.sort(key",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "FitFiles.sort(key = lambda file: file.zdif, reverse = True)\n#print(''),\n#print(FitFiles)\n# In[13]:\n# Make all objects flush\nnum = 1\nfor thing in FitFiles:\n    thing.flush()\n    print(num)\n    num+=1",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "num = 1\nfor thing in FitFiles:\n    thing.flush()\n    print(num)\n    num+=1\noriginal = FitFiles[0]\n# In[16]:\nif copier == True:\n    w1 = original.xdif\n    l1 = original.ydif",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "original",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "original = FitFiles[0]\n# In[16]:\nif copier == True:\n    w1 = original.xdif\n    l1 = original.ydif\n    h1 = original.zdif\n    for x in range(num_of_copies):\n        new = original\n        print(new)\n        new.geo.save(path+' - '+str(x))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "origin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "origin = [0,0]\ncenter = [width/2,length/2]\nrow = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "center = [width/2,length/2]\nrow = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    moa = thing.xdif*(thing.ydif^3)/12",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "row",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "row = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    moa = thing.xdif*(thing.ydif^3)/12\n    print('This is the wsum: '+str(wsum))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "combined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    moa = thing.xdif*(thing.ydif^3)/12\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "wsum",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "wsum = 0\ngroup = 1\nbatch = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    moa = thing.xdif*(thing.ydif^3)/12\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "group = 1\nbatch = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    moa = thing.xdif*(thing.ydif^3)/12\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "batch",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "batch = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    moa = thing.xdif*(thing.ydif^3)/12\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "margin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "peekOfCode": "margin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    moa = thing.xdif*(thing.ydif^3)/12\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row\n        print('This is the lsum: ' +str(origin[1]))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Ordered",
        "documentation": {}
    },
    {
        "label": "stlfile",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "class stlfile:\n    originalname = ''\n    tweakedname = ''\n# Get a list of stl files\npath = r\"\"\"C:\\Users\\singers\\Documents\\buildplateoptimization\\Group1\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "STLattributes",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "class STLattributes:\n#     filepath = None\n#     maxx = None\n#     minx = None\n#     maxy = None\n#     miny = None\n#     maxz = None\n#     minz = None\n#     xdif = None\n#     ydif = None",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "find_mins_maxs",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "def find_mins_maxs(obj):\n    minx = maxx = miny = maxy = minz = maxz = None\n    for p in obj.points:\n    # p contains (x, y, z)\n        if minx is None:\n            minx = p[stl.Dimension.X]\n            maxx = p[stl.Dimension.X]\n            miny = p[stl.Dimension.Y]\n            maxy = p[stl.Dimension.Y]\n            minz = p[stl.Dimension.Z]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "evalfunction",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "def evalfunction(xys,listofmodels):\n    i = totalW = 0\n    center = [100,125]\n    #print(xys)\n    for j,model in enumerate(listofmodels):\n        #print(model)\n        individual_w = 0\n        x_local = xys[i]\n        y_local = xys[i+1]\n        #[thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "path = r\"\"\"C:\\Users\\singers\\Documents\\buildplateoptimization\\Group1\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                #print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[71]:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "listOfSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "listOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                #print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[71]:\n# Test to see if they are valid by trying to process them with the numpystl library",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "numfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "numfiles = len(listOfSTLfiles)\nvolumeArray =np.empty( shape=(numfiles,1) )\ncount = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "count = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "validSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "validSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:\n       print('error occured')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "copier",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "copier = False\nif len(Tweaked) == 1:\n    choice = input('We noticed there is only one file. Would you like to make copies? (Y/N) ')\n    if choice[0] == 'Y':\n        copier = True\n        num_of_copies = int(input('How many copies would you like? '))\n    else:\n        copier = False\n# In[74]:\ndef find_mins_maxs(obj):",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "AllFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "AllFiles = []\nfor thing in Tweaked:\n    model = STLattributes(thing)\n    AllFiles.append(model)\n# In[77]:\n# Define Build Plate Space\n# width = input('What is the width of the buildplate? ')\n# length = input('What is the length of the buildplate? ')\n# height = input('What is the height of the buildplate? ')\nwidth = 200",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "width = 200\nlength = 250\nheight = 300\nvolume = width*length*height\n# In[78]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "length = 250\nheight = 300\nvolume = width*length*height\n# In[78]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "height = 300\nvolume = width*length*height\n# In[78]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "volume",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "volume = width*length*height\n# In[78]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "FitFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "FitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')\n            if choice[0] == 'R' or 'r':\n                print('Work on this resizing thing later!!!')\n            elif choice[0] == 'E' or 'e':",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "FitFiles.sort(key",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "FitFiles.sort(key = lambda file: file.zdif, reverse = True)\n#print(''),\n#print(FitFiles)\n# In[80]:\n# Make all objects flush and save to CSV\nd = []\ni = 0\ndf = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "d = []\ni = 0\ndf = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "i = 0\ndf = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "df = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "xyarray",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "xyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])\n    bounds += bound",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "bounds",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "bounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])\n    bounds += bound\n#xyarray = [item for sublist in xyarray for item in sublist]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "bound",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "bound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])\n    bounds += bound\n#xyarray = [item for sublist in xyarray for item in sublist]\n#print(df)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "#xyarray",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "#xyarray = [item for sublist in xyarray for item in sublist]\n#print(df)\nsavepath = path+'\\data.csv'\nprint(savepath)     \n#Write to CSV\ndf.to_csv(savepath,sep = ',',mode = 'w',line_terminator = '\\n')\n#print(xyarray)\nprint(len(xyarray))\npopulation_scope = len(xyarray)*4.5 % 2\nprint(bounds)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "savepath",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "savepath = path+'\\data.csv'\nprint(savepath)     \n#Write to CSV\ndf.to_csv(savepath,sep = ',',mode = 'w',line_terminator = '\\n')\n#print(xyarray)\nprint(len(xyarray))\npopulation_scope = len(xyarray)*4.5 % 2\nprint(bounds)\nprint(len(bounds))\n# In[81]:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "df.to_csv(savepath,sep",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "df.to_csv(savepath,sep = ',',mode = 'w',line_terminator = '\\n')\n#print(xyarray)\nprint(len(xyarray))\npopulation_scope = len(xyarray)*4.5 % 2\nprint(bounds)\nprint(len(bounds))\n# In[81]:\nif copier == True:\n    w1 = original.xdif\n    l1 = original.ydif",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "population_scope",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "population_scope = len(xyarray)*4.5 % 2\nprint(bounds)\nprint(len(bounds))\n# In[81]:\nif copier == True:\n    w1 = original.xdif\n    l1 = original.ydif\n    h1 = original.zdif\n    for x in range(num_of_copies):\n        new = FitFiles[0]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "result = differential_evolution(evalfunction,bounds, args = (xyarray,), popsize = 60, polish = False)\n# In[1]:\nbest_coords = result.x\nprint(best_coords)\n# In[86]:\ni = 0\nfor thing in FitFiles:\n    thing.translate(best_coords[i]-thing.minx-thing.xdif/2,0,1,'x')\n    i += 1\n    thing.translate(best_coords[i]-thing.miny-thing.miny/2,0,1,'y')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "best_coords",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "best_coords = result.x\nprint(best_coords)\n# In[86]:\ni = 0\nfor thing in FitFiles:\n    thing.translate(best_coords[i]-thing.minx-thing.xdif/2,0,1,'x')\n    i += 1\n    thing.translate(best_coords[i]-thing.miny-thing.miny/2,0,1,'y')\n    i += 1\n# In[87]:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "i = 0\nfor thing in FitFiles:\n    thing.translate(best_coords[i]-thing.minx-thing.xdif/2,0,1,'x')\n    i += 1\n    thing.translate(best_coords[i]-thing.miny-thing.miny/2,0,1,'y')\n    i += 1\n# In[87]:\ncombined = mesh.Mesh(np.concatenate([x.geo.data for x in FitFiles]))\nsavepath = path+'\\\\new_combined_group_'+'.stl'\ncombined.save(savepath, mode=stl.Mode.ASCII)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "combined = mesh.Mesh(np.concatenate([x.geo.data for x in FitFiles]))\nsavepath = path+'\\\\new_combined_group_'+'.stl'\ncombined.save(savepath, mode=stl.Mode.ASCII)\n# In[88]:\n# Plot Group of Files\nfigure = pyplot.figure()\naxes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "savepath",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "savepath = path+'\\\\new_combined_group_'+'.stl'\ncombined.save(savepath, mode=stl.Mode.ASCII)\n# In[88]:\n# Plot Group of Files\nfigure = pyplot.figure()\naxes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "figure",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "figure = pyplot.figure()\naxes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size\nscale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "axes",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "axes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size\nscale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()\n# In[172]:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "your_mesh",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "your_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size\nscale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()\n# In[172]:\nfrom pyeasyga import pyeasyga\nga = pyeasyga.GeneticAlgorithm(xyarray)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "scale",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "scale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()\n# In[172]:\nfrom pyeasyga import pyeasyga\nga = pyeasyga.GeneticAlgorithm(xyarray)\nga.fitness_function = evalfunction\n# In[173]:\nga.run()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "ga",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "ga = pyeasyga.GeneticAlgorithm(xyarray)\nga.fitness_function = evalfunction\n# In[173]:\nga.run()\nprint(ga.best_individual())\n# In[ ]:\n# Order them on plate\norigin = [0,0]\ncenter = [width/2,length/2]\ntimes = row = []",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "ga.fitness_function",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "ga.fitness_function = evalfunction\n# In[173]:\nga.run()\nprint(ga.best_individual())\n# In[ ]:\n# Order them on plate\norigin = [0,0]\ncenter = [width/2,length/2]\ntimes = row = []\ncombined = None",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "origin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "origin = [0,0]\ncenter = [width/2,length/2]\ntimes = row = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "center = [width/2,length/2]\ntimes = row = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "times",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "times = row = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "combined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "wsum",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "wsum = 0\ngroup = 1\nbatch = []\nmargin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "group = 1\nbatch = []\nmargin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "batch",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "batch = []\nmargin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "margin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "margin = 3\njson = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row\n        #print('This is the lsum: ' +str(origin[1]))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "peekOfCode": "json = r'\"C:\\Program Files\\Ultimaker Cura 3.4\\resources\\definitions\\3dator.def.json\"'\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row\n        #print('This is the lsum: ' +str(origin[1]))\n        row = []",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed - GA",
        "documentation": {}
    },
    {
        "label": "stlfile",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "class stlfile:\n    originalname = ''\n    tweakedname = ''\n# Get a list of stl files\npath = r\"\"\"C:\\Users\\singers\\Documents\\buildplateoptimization\\SmallTest\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "STLattributes",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "class STLattributes:\n#     filepath = None\n#     maxx = None\n#     minx = None\n#     maxy = None\n#     miny = None\n#     maxz = None\n#     minz = None\n#     xdif = None\n#     ydif = None",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "find_mins_maxs",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "def find_mins_maxs(obj):\n    minx = maxx = miny = maxy = minz = maxz = None\n    for p in obj.points:\n    # p contains (x, y, z)\n        if minx is None:\n            minx = p[stl.Dimension.X]\n            maxx = p[stl.Dimension.X]\n            miny = p[stl.Dimension.Y]\n            maxy = p[stl.Dimension.Y]\n            minz = p[stl.Dimension.Z]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "evalfunction",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "def evalfunction(xys,listofmodels):\n    i = totalW = 0\n    center = [100,125]\n    #print(xys)\n    for j,model in enumerate(listofmodels):\n        #print(model)\n        individual_w = 0\n        x_local = xys[i]\n        y_local = xys[i+1]\n        #[thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "path = r\"\"\"C:\\Users\\singers\\Documents\\buildplateoptimization\\SmallTest\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                #print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[4]:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "listOfSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "listOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                #print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[4]:\n# Test to see if they are valid by trying to process them with the numpystl library",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "numfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "numfiles = len(listOfSTLfiles)\nvolumeArray =np.empty( shape=(numfiles,1) )\ncount = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "count = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "validSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "validSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:\n       print('error occured')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "copier",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "copier = False\nif len(Tweaked) == 1:\n    choice = input('We noticed there is only one file. Would you like to make copies? (Y/N) ')\n    if choice[0] == 'Y':\n        copier = True\n        num_of_copies = int(input('How many copies would you like? '))\n    else:\n        copier = False\n# In[7]:\ndef find_mins_maxs(obj):",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "AllFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "AllFiles = []\nfor thing in Tweaked:\n    model = STLattributes(thing)\n    AllFiles.append(model)\n# In[10]:\n# Define Build Plate Space\n# width = input('What is the width of the buildplate? ')\n# length = input('What is the length of the buildplate? ')\n# height = input('What is the height of the buildplate? ')\nwidth = 200",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "width = 200\nlength = 250\nheight = 300\nvolume = width*length*height\n# In[11]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "length = 250\nheight = 300\nvolume = width*length*height\n# In[11]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "height = 300\nvolume = width*length*height\n# In[11]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "volume",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "volume = width*length*height\n# In[11]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "FitFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "FitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')\n            if choice[0] == 'R' or 'r':\n                print('Work on this resizing thing later!!!')\n            elif choice[0] == 'E' or 'e':",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "FitFiles.sort(key",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "FitFiles.sort(key = lambda file: file.zdif, reverse = True)\n#print(''),\n#print(FitFiles)\n# In[13]:\n# Make all objects flush and save to CSV\nd = []\ni = 0\ndf = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "d = []\ni = 0\ndf = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "i = 0\ndf = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "df = pd.DataFrame(data=d, columns = ['Filepath', 'Min X', 'Max X', 'Min Y','Max Y','Min Z','Max Z'])\nxyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "xyarray",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "xyarray = []\nbounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])\n    bounds += bound",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "bounds",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "bounds = []\nbound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])\n    bounds += bound\n#xyarray = [item for sublist in xyarray for item in sublist]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "bound",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "bound = [(0,width),(0,length)]\nfor thing in FitFiles:\n    thing.flush()\n    thing.center([width/2,length/2],[width,length])\n    df.loc[i] = [thing.filepath, thing.minx, thing.maxx,thing.miny,thing.maxy,thing.minz,thing.maxz]\n    i+=1\n    xyarray.append([thing.xdif,thing.ydif,thing.minx,thing.maxx, thing.miny,thing.maxy, thing.zdif])\n    bounds += bound\n#xyarray = [item for sublist in xyarray for item in sublist]\n#print(df)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "#xyarray",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "#xyarray = [item for sublist in xyarray for item in sublist]\n#print(df)\nsavepath = path+'\\data.csv'\nprint(savepath)     \n#Write to CSV\ndf.to_csv(savepath,sep = ',',mode = 'w',line_terminator = '\\n')\n#print(xyarray)\nprint(len(xyarray))\npopulation_scope = len(xyarray)*4.5 % 2\nprint(bounds)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "savepath",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "savepath = path+'\\data.csv'\nprint(savepath)     \n#Write to CSV\ndf.to_csv(savepath,sep = ',',mode = 'w',line_terminator = '\\n')\n#print(xyarray)\nprint(len(xyarray))\npopulation_scope = len(xyarray)*4.5 % 2\nprint(bounds)\nprint(len(bounds))\n# In[14]:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "df.to_csv(savepath,sep",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "df.to_csv(savepath,sep = ',',mode = 'w',line_terminator = '\\n')\n#print(xyarray)\nprint(len(xyarray))\npopulation_scope = len(xyarray)*4.5 % 2\nprint(bounds)\nprint(len(bounds))\n# In[14]:\nif copier == True:\n    w1 = original.xdif\n    l1 = original.ydif",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "population_scope",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "population_scope = len(xyarray)*4.5 % 2\nprint(bounds)\nprint(len(bounds))\n# In[14]:\nif copier == True:\n    w1 = original.xdif\n    l1 = original.ydif\n    h1 = original.zdif\n    for x in range(num_of_copies):\n        new = FitFiles[0]",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "origin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "origin = [0,0]\ncenter = [width/2,length/2]\nrow = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\ncoords = []\nmargin = 3\nfor thing in FitFiles:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "center",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "center = [width/2,length/2]\nrow = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\ncoords = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "row",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "row = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\ncoords = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "combined = None\nwsum = 0\ngroup = 1\nbatch = []\ncoords = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "wsum",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "wsum = 0\ngroup = 1\nbatch = []\ncoords = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "group = 1\nbatch = []\ncoords = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "batch",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "batch = []\ncoords = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row+margin",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "coords",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "coords = []\nmargin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row+margin\n        #print('This is the lsum: ' +str(origin[1]))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "margin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "margin = 3\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    #print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row+margin\n        #print('This is the lsum: ' +str(origin[1]))\n        row = []",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "result = fmin_tnc(evalfunction,x0 = coords, args = (xyarray,),approx_grad = True, bounds = bounds, epsilon = 0.1, maxfun = 1000000, stepmx = 0.1, eta = .1)\n# In[19]:\nbest_coords = result[0]\ncoord = []\nprint(best_coords)\nprint(coords)\n# same = dif = 0\n# for x in range(len(coords)):\n#     if best_coords[x] == coords[x]:\n#         same += 1",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "best_coords",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "best_coords = result[0]\ncoord = []\nprint(best_coords)\nprint(coords)\n# same = dif = 0\n# for x in range(len(coords)):\n#     if best_coords[x] == coords[x]:\n#         same += 1\n#     else:\n#         dif +=1",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "coord",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "coord = []\nprint(best_coords)\nprint(coords)\n# same = dif = 0\n# for x in range(len(coords)):\n#     if best_coords[x] == coords[x]:\n#         same += 1\n#     else:\n#         dif +=1\n# print(same,dif)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "i = 0\nfor thing in FitFiles:\n    thing.translate(best_coords[i]-thing.minx-thing.xdif/2,0,1,'x')\n    i += 1\n    thing.translate(best_coords[i]-thing.miny-thing.miny/2,0,1,'y')\n    i += 1\n# In[21]:\ncombined = mesh.Mesh(np.concatenate([x.geo.data for x in FitFiles]))\nsavepath = path+'\\\\new_combined_group_'+'.stl'\ncombined.save(savepath, mode=stl.Mode.ASCII)",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "combined = mesh.Mesh(np.concatenate([x.geo.data for x in FitFiles]))\nsavepath = path+'\\\\new_combined_group_'+'.stl'\ncombined.save(savepath, mode=stl.Mode.ASCII)\n# In[22]:\n# Plot Group of Files\nfigure = pyplot.figure()\naxes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "savepath",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "savepath = path+'\\\\new_combined_group_'+'.stl'\ncombined.save(savepath, mode=stl.Mode.ASCII)\n# In[22]:\n# Plot Group of Files\nfigure = pyplot.figure()\naxes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "figure",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "figure = pyplot.figure()\naxes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size\nscale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "axes",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "axes = mplot3d.Axes3D(figure)\n# Load the STL files and add the vectors to the plot\nyour_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size\nscale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "your_mesh",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "your_mesh = mesh.Mesh.from_file(savepath)\naxes.add_collection3d(mplot3d.art3d.Poly3DCollection(your_mesh.vectors))\n# Auto scale to the mesh size\nscale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "scale",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "description": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "peekOfCode": "scale = your_mesh.points.flatten(-1)\naxes.auto_scale_xyz(scale, scale, scale)\n# Show the plot to the screen\npyplot.show()",
        "detail": "lib.core.opengl.Optimizermaster.Optimizer-Packed-GD",
        "documentation": {}
    },
    {
        "label": "stlfile",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "class stlfile:\n    originalname = ''\n    tweakedname = ''\n# Get a list of stl files\npath = r\"\"\"C:\\Users\\singers\\Documents\\buildplateoptimization\\TooManySTLs\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "STLattributes",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "class STLattributes:\n#     filepath = None\n#     maxx = None\n#     minx = None\n#     maxy = None\n#     miny = None\n#     maxz = None\n#     minz = None\n#     xdif = None\n#     ydif = None",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "find_mins_maxs",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "def find_mins_maxs(obj):\n    minx = maxx = miny = maxy = minz = maxz = None\n    for p in obj.points:\n    # p contains (x, y, z)\n        if minx is None:\n            minx = p[stl.Dimension.X]\n            maxx = p[stl.Dimension.X]\n            miny = p[stl.Dimension.Y]\n            maxy = p[stl.Dimension.Y]\n            minz = p[stl.Dimension.Z]",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "copy_obj",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "def copy_obj(obj, dims, num_rows, num_cols, num_layers):\n    w, l, h = dims\n    copies = []\n    for layer in range(num_layers):\n        for row in range(num_rows):\n            for col in range(num_cols):\n                # skip the position where original being copied is\n                if row == 0 and col == 0 and layer == 0:\n                    continue\n                _copy = mesh.Mesh(obj.data.copy())",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "path = r\"\"\"C:\\Users\\singers\\Documents\\buildplateoptimization\\TooManySTLs\"\"\"\nlistOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[3]:",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "listOfSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "listOfSTLfiles = []\nfor root, dirs, files in os.walk(path):\n        for file_ in files:\n            filename, file_extension = os.path.splitext(file_)\n            if(file_extension=='.stl'):\n                completepath = os.path.join(root, file_)\n                print(completepath)\n                listOfSTLfiles.append(completepath)\n# In[3]:\n# Test to see if they are valid by trying to process them with the numpystl library",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "numfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "numfiles = len(listOfSTLfiles)\nvolumeArray =np.empty( shape=(numfiles,1) )\ncount = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "count = 0\nvalidSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "validSTLfiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "validSTLfiles = []\nfor filepath in listOfSTLfiles:\n   print(filepath)\n   volume=0\n   try:\n       your_mesh = mesh.Mesh.from_file(filepath)\n       volume, cog, inertia = your_mesh.get_mass_properties()\n       validSTLfiles.append(filepath)\n   except:\n       print('error occured')",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "AllFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "AllFiles = []\nfor thing in Tweaked:\n    model = STLattributes(thing)\n    AllFiles.append(model)\n# In[9]:\n# Define Build Plate Space\n# width = input('What is the width of the buildplate? ')\n# length = input('What is the length of the buildplate? ')\n# height = input('What is the height of the buildplate? ')\nwidth = 200",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "width = 200\nlength = 250\nheight = 300\nvolume = width*length*height\n# In[10]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "length = 250\nheight = 300\nvolume = width*length*height\n# In[10]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "height = 300\nvolume = width*length*height\n# In[10]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "volume",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "volume = width*length*height\n# In[10]:\n# Check if any files are too big\nFitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "FitFiles",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "FitFiles = []\nfor thing in AllFiles:\n    if thing.volume > volume:\n        print(\"Warning: \" + str(thing.filepath) + \"is too big for the buildplate\"),\n        answer = input('Do you wish to continue? (Y/N) ')\n        if answer == 'Y':\n            choice = input('Would you like to resize (R) or exclude the model (E)? ')\n            if choice[0] == 'R' or 'r':\n                print('Work on this resizing thing later!!!')\n            elif choice[0] == 'E' or 'e':",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "FitFiles.sort(key",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "FitFiles.sort(key = lambda file: file.zdif, reverse = True)\n#print(''),\n#print(FitFiles)\nprint('Sorting Files')\n# In[12]:\n# Make all objects flush\nfor thing in FitFiles:\n    thing.flush()\n# In[16]:\n# Order them on plate",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "origin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "origin = [0,0]\nrow = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 2\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    print('This is the wsum: '+str(wsum))",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "row",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "row = []\ncombined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 2\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "combined",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "combined = None\nwsum = 0\ngroup = 1\nbatch = []\nmargin = 2\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "wsum",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "wsum = 0\ngroup = 1\nbatch = []\nmargin = 2\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "group = 1\nbatch = []\nmargin = 2\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "batch",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "batch = []\nmargin = 2\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row\n        print('This is the lsum: ' +str(origin[1]))",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "margin",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "description": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "peekOfCode": "margin = 2\nfor thing in FitFiles:\n    wsum += thing.xdif+margin\n    print('This is the wsum: '+str(wsum))\n    if thing.xdif+origin[0] >= width:\n        max_y_in_row = max([x for x in row])\n        origin[0] = wsum = 0\n        origin[1] += max_y_in_row\n        print('This is the lsum: ' +str(origin[1]))\n        row = []",
        "detail": "lib.core.opengl.Optimizermaster.OrderedOptimizer",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "kind": 6,
        "importPath": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "description": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "peekOfCode": "class Configuration:\n    inputfile=''\n    outputfile=''\n    verbose = True\n    show_progress = True\n    convert = False\n    output_type = 'binarystl'\n    extended_mode = False\n    version = True\n    result = False",
        "detail": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "getargs",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "description": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "peekOfCode": "def getargs():\n    parser = argparse.ArgumentParser(description=\"Orientation tool for better 3D prints\")\n    parser.add_argument('-i', action=\"store\",  \n                        dest=\"inputfile\", help=\"select input file\")\n    parser.add_argument('-o', action=\"store\", dest=\"outputfile\",\n                        help=\"select output file. '_tweaked' is postfix by default\")\n    parser.add_argument('-vb', '--verbose', action=\"store_true\", dest=\"verbose\",\n                        help=\"increase output verbosity\", default=False)\n    parser.add_argument('-p', '--progress', action=\"store_true\", dest=\"show_progress\",\n                        help=\"show the progress of Tweaking\", default=False)",
        "detail": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "RunTweakerFromProgram",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "description": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "peekOfCode": "def RunTweakerFromProgram(conf):\n    # Get the command line arguments. Run in IDE for demo tweaking.\n    stime = time()\n    # try:\n    #     args = getargs()\n    #     if args is None:\n    #         sys.exit()\n    # except:\n    #     raise\n    try:",
        "detail": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "description": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "peekOfCode": "__author__ = \"Christoph Schranz, Salzburg Research\"\n__version__ = \"3.8\"\nclass Configuration:\n    inputfile=''\n    outputfile=''\n    verbose = True\n    show_progress = True\n    convert = False\n    output_type = 'binarystl'\n    extended_mode = False",
        "detail": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "description": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "peekOfCode": "__version__ = \"3.8\"\nclass Configuration:\n    inputfile=''\n    outputfile=''\n    verbose = True\n    show_progress = True\n    convert = False\n    output_type = 'binarystl'\n    extended_mode = False\n    version = True",
        "detail": "lib.core.opengl.Optimizermaster.RunTweakerFromProgram",
        "documentation": {}
    },
    {
        "label": "Read3mf",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.ThreeMF",
        "description": "lib.core.opengl.Optimizermaster.ThreeMF",
        "peekOfCode": "def Read3mf(f):\n    '''load parts of the 3mf with their properties'''\n    # The base object of 3mf is a zipped archive.\n    archive = zipfile.ZipFile(f, \"r\")\n    try:\n        root = ET.parse(archive.open(\"3D/3dmodel.model\"))\n        # There can be multiple objects, try to load all of them.\n        objects = root.findall(\"./3mf:resources/3mf:object\", namespace)\n        if len(objects) == 0:\n            print(\"No objects found in 3MF file %s, either the file is damaged or you are using an outdated format\", f)",
        "detail": "lib.core.opengl.Optimizermaster.ThreeMF",
        "documentation": {}
    },
    {
        "label": "getTransformation",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.ThreeMF",
        "description": "lib.core.opengl.Optimizermaster.ThreeMF",
        "peekOfCode": "def getTransformation(root, objectid):\n    builds = root.findall(\".//3mf:item\", namespace)\n    transforms = list()\n    for item in builds:\n        if item.get(\"transform\"):\n            transforms.append((item.get(\"objectid\"), item.get(\"transform\")))\n    components = root.findall(\".//3mf:components\", namespace)\n    objects = root.findall(\"./3mf:resources/3mf:object\", namespace)\n    for (transid, transform) in transforms:\n        for obj in objects:",
        "detail": "lib.core.opengl.Optimizermaster.ThreeMF",
        "documentation": {}
    },
    {
        "label": "rotate3MF",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.ThreeMF",
        "description": "lib.core.opengl.Optimizermaster.ThreeMF",
        "peekOfCode": "def rotate3MF(f, outfile, objs):\n    #TODO doesn't work at the moment\n    archive = zipfile.ZipFile(f, \"r\")\n    root = ET.parse(archive.open(\"3D/3dmodel.model\"))\n    for obj in objs:\n        itemid = None\n        # get build id for transform value\n        objects3MF = root.findall(\"./3mf:resources/3mf:object\", namespace)\n        for elem in objects3MF:\n            for component in elem.findall(\".//3mf:component\", namespace):",
        "detail": "lib.core.opengl.Optimizermaster.ThreeMF",
        "documentation": {}
    },
    {
        "label": "zipdir",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.ThreeMF",
        "description": "lib.core.opengl.Optimizermaster.ThreeMF",
        "peekOfCode": "def zipdir(path, ziph):\n    # ziph is zipfile handle\n    for root, dirs, files in os.walk(path):\n        for file in files:\n            ziph.write(os.path.join(root, file))",
        "detail": "lib.core.opengl.Optimizermaster.ThreeMF",
        "documentation": {}
    },
    {
        "label": "namespace",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.ThreeMF",
        "description": "lib.core.opengl.Optimizermaster.ThreeMF",
        "peekOfCode": "namespace = {\n    \"3mf\": \"http://schemas.microsoft.com/3dmanufacturing/core/2015/02\",\n    \"m\" : \"http://schemas.microsoft.com/3dmanufacturing/material/2015/02\"\n}\ndef Read3mf(f):\n    '''load parts of the 3mf with their properties'''\n    # The base object of 3mf is a zipped archive.\n    archive = zipfile.ZipFile(f, \"r\")\n    try:\n        root = ET.parse(archive.open(\"3D/3dmodel.model\"))",
        "detail": "lib.core.opengl.Optimizermaster.ThreeMF",
        "documentation": {}
    },
    {
        "label": "getargs",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.Tweaker",
        "description": "lib.core.opengl.Optimizermaster.Tweaker",
        "peekOfCode": "def getargs():\n    parser = argparse.ArgumentParser(description=\"Orientation tool for better 3D prints\")\n    parser.add_argument('-i', action=\"store\",  \n                        dest=\"inputfile\", help=\"select input file\")\n    parser.add_argument('-o', action=\"store\", dest=\"outputfile\",\n                        help=\"select output file. '_tweaked' is postfix by default\")\n    parser.add_argument('-vb', '--verbose', action=\"store_true\", dest=\"verbose\",\n                        help=\"increase output verbosity\", default=False)\n    parser.add_argument('-p', '--progress', action=\"store_true\", dest=\"show_progress\",\n                        help=\"show the progress of Tweaking\", default=False)",
        "detail": "lib.core.opengl.Optimizermaster.Tweaker",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Tweaker",
        "description": "lib.core.opengl.Optimizermaster.Tweaker",
        "peekOfCode": "__author__ = \"Christoph Schranz, Salzburg Research\"\n__version__ = \"3.8\"\ndef getargs():\n    parser = argparse.ArgumentParser(description=\"Orientation tool for better 3D prints\")\n    parser.add_argument('-i', action=\"store\",  \n                        dest=\"inputfile\", help=\"select input file\")\n    parser.add_argument('-o', action=\"store\", dest=\"outputfile\",\n                        help=\"select output file. '_tweaked' is postfix by default\")\n    parser.add_argument('-vb', '--verbose', action=\"store_true\", dest=\"verbose\",\n                        help=\"increase output verbosity\", default=False)",
        "detail": "lib.core.opengl.Optimizermaster.Tweaker",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Tweaker",
        "description": "lib.core.opengl.Optimizermaster.Tweaker",
        "peekOfCode": "__version__ = \"3.8\"\ndef getargs():\n    parser = argparse.ArgumentParser(description=\"Orientation tool for better 3D prints\")\n    parser.add_argument('-i', action=\"store\",  \n                        dest=\"inputfile\", help=\"select input file\")\n    parser.add_argument('-o', action=\"store\", dest=\"outputfile\",\n                        help=\"select output file. '_tweaked' is postfix by default\")\n    parser.add_argument('-vb', '--verbose', action=\"store_true\", dest=\"verbose\",\n                        help=\"increase output verbosity\", default=False)\n    parser.add_argument('-p', '--progress', action=\"store_true\", dest=\"show_progress\",",
        "detail": "lib.core.opengl.Optimizermaster.Tweaker",
        "documentation": {}
    },
    {
        "label": "getargs",
        "kind": 2,
        "importPath": "lib.core.opengl.Optimizermaster.Tweaker2",
        "description": "lib.core.opengl.Optimizermaster.Tweaker2",
        "peekOfCode": "def getargs():\n    parser = argparse.ArgumentParser(description=\"Orientation tool for better 3D prints\")\n    parser.add_argument('-i', action=\"store\",  \n                        dest=\"inputfile\", help=\"select input file\")\n    parser.add_argument('-o', action=\"store\", dest=\"outputfile\",\n                        help=\"select output file. '_tweaked' is postfix by default\")\n    parser.add_argument('-vb', '--verbose', action=\"store_true\", dest=\"verbose\",\n                        help=\"increase output verbosity\", default=False)\n    parser.add_argument('-p', '--progress', action=\"store_true\", dest=\"show_progress\",\n                        help=\"show the progress of Tweaking\", default=False)",
        "detail": "lib.core.opengl.Optimizermaster.Tweaker2",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Tweaker2",
        "description": "lib.core.opengl.Optimizermaster.Tweaker2",
        "peekOfCode": "__author__ = \"Christoph Schranz, Salzburg Research\"\n__version__ = \"3.8\"\ndef getargs():\n    parser = argparse.ArgumentParser(description=\"Orientation tool for better 3D prints\")\n    parser.add_argument('-i', action=\"store\",  \n                        dest=\"inputfile\", help=\"select input file\")\n    parser.add_argument('-o', action=\"store\", dest=\"outputfile\",\n                        help=\"select output file. '_tweaked' is postfix by default\")\n    parser.add_argument('-vb', '--verbose', action=\"store_true\", dest=\"verbose\",\n                        help=\"increase output verbosity\", default=False)",
        "detail": "lib.core.opengl.Optimizermaster.Tweaker2",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "lib.core.opengl.Optimizermaster.Tweaker2",
        "description": "lib.core.opengl.Optimizermaster.Tweaker2",
        "peekOfCode": "__version__ = \"3.8\"\ndef getargs():\n    parser = argparse.ArgumentParser(description=\"Orientation tool for better 3D prints\")\n    parser.add_argument('-i', action=\"store\",  \n                        dest=\"inputfile\", help=\"select input file\")\n    parser.add_argument('-o', action=\"store\", dest=\"outputfile\",\n                        help=\"select output file. '_tweaked' is postfix by default\")\n    parser.add_argument('-vb', '--verbose', action=\"store_true\", dest=\"verbose\",\n                        help=\"increase output verbosity\", default=False)\n    parser.add_argument('-p', '--progress', action=\"store_true\", dest=\"show_progress\",",
        "detail": "lib.core.opengl.Optimizermaster.Tweaker2",
        "documentation": {}
    },
    {
        "label": "World",
        "kind": 6,
        "importPath": "lib.core.opengl.PpyGl",
        "description": "lib.core.opengl.PpyGl",
        "peekOfCode": "class World(QOpenGLWidget):\n    def __init__(self, *args, **kwargs):\n        super(World, self).__init__(*args, **kwargs)\n        self.setGeometry(QtCore.QRect(10, 10,700, 700))#窗口位置和大小\n        self.isMove=False\n        self.isRotate=False\n        self.model=[]#该列表需要存储一个一个的字典，字典形式为{'material':Materials,'data':numpy.array()}，每一个model[x]代表一个模型，包含材质和点的数据\n    def initdata(self,data):\n        self.model=data\n    def initializeGL(self):",
        "detail": "lib.core.opengl.PpyGl",
        "documentation": {}
    },
    {
        "label": "camera",
        "kind": 6,
        "importPath": "lib.core.opengl.PpyGl",
        "description": "lib.core.opengl.PpyGl",
        "peekOfCode": "class camera:\n    def __init__(self):\n        self.mPos=Vector3f(0.0,0.0,0.0)\n        self.mViewCenter=Vector3f(0.0,0.0,-1.0)\n        self.mUp=Vector3f(0.0,1.0,0.0)\n        self.right=100\n        self.top=100\n        self.forwardDir=self.mViewCenter-self.mPos\n        self.rithtDir=self.forwardDir.cross(self.mUp)\n    def Update(self):",
        "detail": "lib.core.opengl.PpyGl",
        "documentation": {}
    },
    {
        "label": "Vector3f",
        "kind": 6,
        "importPath": "lib.core.opengl.PpyGl",
        "description": "lib.core.opengl.PpyGl",
        "peekOfCode": "class Vector3f:\n    def __init__(self,x,y,z):\n        self.X=x\n        self.Y=y\n        self.Z=z\n    def __add__(self,other):\n        return Vector3f(self.X+other.X,self.Y+other.Y,self.Z+other.Z)\n    def __sub__(self,other):\n        return Vector3f(self.X-other.X,self.Y-other.Y,self.Z-other.Z)\n    def __mul__(self,other):",
        "detail": "lib.core.opengl.PpyGl",
        "documentation": {}
    },
    {
        "label": "Light",
        "kind": 6,
        "importPath": "lib.core.opengl.PpyGl",
        "description": "lib.core.opengl.PpyGl",
        "peekOfCode": "class Light:\n    def __init__(self,m):\n        glShadeModel(GL_SMOOTH)\n        self.lightpos=[0,0,1,0]\n        whiltlitht=[1,1,1,1]\n        glMaterial(GL_FRONT,GL_AMBIENT,m['ambient_light'])\n        glMaterial(GL_FRONT,GL_SPECULAR, m['specular'])\n        glMaterial(GL_FRONT,GL_SHININESS, m['shininess'])\n        glMaterial(GL_FRONT,GL_DIFFUSE, m['diffuse'])\n        #glLight(GL_LIGHT0,GL_POSITION, self.lightpos)",
        "detail": "lib.core.opengl.PpyGl",
        "documentation": {}
    },
    {
        "label": "Cube",
        "kind": 2,
        "importPath": "lib.core.opengl.PpyGl",
        "description": "lib.core.opengl.PpyGl",
        "peekOfCode": "def Cube(x,y,z,texture:list,face=None):\n    glBegin(GL_QUADS)\n    #开始绘制时是一个绘制一个或多个四边形，就是独立的那种\n    glColor3f(1.0,1.0,1.0)\n    #绘制顶面,在y=1的地方，分别在xz+- 1处\n    glVertex3f( 1.0, 1.0,-1.0)\n    glVertex3f(-1.0, 1.0,-1.0)\n    glVertex3f(-1.0, 1.0, 1.0)\n    glVertex3f( 1.0, 1.0, 1.0) \n    glColor3f(1.0,1.0,1.0)",
        "detail": "lib.core.opengl.PpyGl",
        "documentation": {}
    },
    {
        "label": "OutTheChoicePanel",
        "kind": 2,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "def OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel\n    if sender == LastSender:\n        #如果上一个sender==现在的sender，则删除此次操作\n        print('[!]:is common menu button')\n        cleanGraph()\n        for i in ChoicePanelDict:\n            print('func 1')\n            self.findChild(QWidget,i).deleteLater()",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "CheckRemoveThePanel",
        "kind": 2,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "def CheckRemoveThePanel(ClickPos) -> None:\n    global ChoicePanelDict,This_Self,LastSender\n    if LastSender != None:\n        LastSender.setObjectName('WindowName')#把id恢复，获取到hover样式\n        LastSender.setStyleSheet('#WindowName{background-color: rgba(0,0,0,0);background-image: url(./img/bottom_to.png);background-position:right center;background-repeat:no-repeat;}#WindowName:hover{background-color: #ededed;}')\n        cleanGraph()\n    if ChoicePanelDict == {}:\n        #如果弹出框记录里什么都没有，就直接返回咯\n        return\n    else:",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "DrawChoicePanel",
        "kind": 2,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "def DrawChoicePanel(Widget:QWidget,marginA,marginB,Name,ThisPanel,sender:QPushButton) -> None:\n    global This_Self\n    #print(Widget,marginA,marginB,Name,ThisPanel,sender)\n    #Draw the ChoicePanel,Widget is ChoicePanel\n    # creating a QGraphicsDropShadowEffect object\n    This_Self.effect_shadow = QGraphicsDropShadowEffect()\n    This_Self.effect_shadow.setOffset(0,0) # 偏移\n    This_Self.effect_shadow.setBlurRadius(20) # 阴影半径\n    This_Self.effect_shadow.setColor(QtCore.Qt.gray) # 阴影颜色\n    Widget.setGraphicsEffect(This_Self.effect_shadow) # 将设置套用到button窗口中",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "cleanGraph",
        "kind": 2,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "def cleanGraph():\n    This_Self.effect_shadow.setBlurRadius(0)  # 阴影半径\n    #This_Self.effect_shadow_Sender.setBlurRadius(0) #sender\n    #This_Self.effect_shadow = QGraphicsDropShadowEffect(This_Self)\n    This_Self.effect_shadow.setOffset(0, 0)  # 偏移\n    #This_Self.effect_shadow.setColor(QtCore.Qt.blue)  # 阴影颜色\n    ThisMainPanel.setGraphicsEffect(This_Self.effect_shadow)  # 将设置套用到button窗口中\ndef ChangePanel(Name):\n    global ChoicePanelDict,LastSender,ThisMainPanel,This_Self\n    cleanGraph()",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "ChangePanel",
        "kind": 2,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "def ChangePanel(Name):\n    global ChoicePanelDict,LastSender,ThisMainPanel,This_Self\n    cleanGraph()\n    for i in ChoicePanelDict:\n        print('func 5')\n        This_Self.findChild(QWidget,i).deleteLater()\n        ChoicePanelDict = {}\n    #改变此panel的内容\n    #获取到此按钮\n    #PointerPos = QCursor.pos()",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "ChoicePanel_Width",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "ChoicePanel_Width = 500\nChoicePanel_Height = 230\nChoicePanelDict = {}\nChoicePanelCount = 0\nThis_Self = None\nLastSender = None\nThisMainPanel = None\ndef OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "ChoicePanel_Height",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "ChoicePanel_Height = 230\nChoicePanelDict = {}\nChoicePanelCount = 0\nThis_Self = None\nLastSender = None\nThisMainPanel = None\ndef OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel\n    if sender == LastSender:",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "ChoicePanelDict",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "ChoicePanelDict = {}\nChoicePanelCount = 0\nThis_Self = None\nLastSender = None\nThisMainPanel = None\ndef OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel\n    if sender == LastSender:\n        #如果上一个sender==现在的sender，则删除此次操作",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "ChoicePanelCount",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "ChoicePanelCount = 0\nThis_Self = None\nLastSender = None\nThisMainPanel = None\ndef OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel\n    if sender == LastSender:\n        #如果上一个sender==现在的sender，则删除此次操作\n        print('[!]:is common menu button')",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "This_Self",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "This_Self = None\nLastSender = None\nThisMainPanel = None\ndef OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel\n    if sender == LastSender:\n        #如果上一个sender==现在的sender，则删除此次操作\n        print('[!]:is common menu button')\n        cleanGraph()",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "LastSender",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "LastSender = None\nThisMainPanel = None\ndef OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel\n    if sender == LastSender:\n        #如果上一个sender==现在的sender，则删除此次操作\n        print('[!]:is common menu button')\n        cleanGraph()\n        for i in ChoicePanelDict:",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "ThisMainPanel",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "ThisMainPanel = None\ndef OutTheChoicePanel(sender:QPushButton,self,WindowPos) -> None:\n    globals()['SELF'] = self\n    global ChoicePanelCount,ChoicePanelDict,This_Self,LastSender,ThisMainPanel\n    if sender == LastSender:\n        #如果上一个sender==现在的sender，则删除此次操作\n        print('[!]:is common menu button')\n        cleanGraph()\n        for i in ChoicePanelDict:\n            print('func 1')",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "ChoicePanel_Style",
        "kind": 5,
        "importPath": "lib.core.ui.ChoicePanel",
        "description": "lib.core.ui.ChoicePanel",
        "peekOfCode": "ChoicePanel_Style = \"{background-color: #ededed;border: 1px solid #ccc;\"\ndef cleanGraph():\n    This_Self.effect_shadow.setBlurRadius(0)  # 阴影半径\n    #This_Self.effect_shadow_Sender.setBlurRadius(0) #sender\n    #This_Self.effect_shadow = QGraphicsDropShadowEffect(This_Self)\n    This_Self.effect_shadow.setOffset(0, 0)  # 偏移\n    #This_Self.effect_shadow.setColor(QtCore.Qt.blue)  # 阴影颜色\n    ThisMainPanel.setGraphicsEffect(This_Self.effect_shadow)  # 将设置套用到button窗口中\ndef ChangePanel(Name):\n    global ChoicePanelDict,LastSender,ThisMainPanel,This_Self",
        "detail": "lib.core.ui.ChoicePanel",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "lib.core.ui.newPanelUI",
        "description": "lib.core.ui.newPanelUI",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        self.verticalLayout = QtWidgets.QVBoxLayout(Form)\n        self.THIS_Widget = QtWidgets.QFrame(Form)\n        self.THIS_Widget.setObjectName('THIS_Widget')\n        ##\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.verticalLayout.setSpacing(0)\n        self.verticalLayout.setObjectName(\"verticalLayout\")",
        "detail": "lib.core.ui.newPanelUI",
        "documentation": {}
    },
    {
        "label": "PanelWindow",
        "kind": 6,
        "importPath": "lib.core.ui.newPanelWindow",
        "description": "lib.core.ui.newPanelWindow",
        "peekOfCode": "class PanelWindow(QWidget, Ui_Form):\n    def __init__(self, parent=None):\n        super(PanelWindow, self).__init__(parent)\n        self.setupUi(self)\n        self._init_main_window()  # 主窗口初始化设置\n        self._initDrag()  # 设置鼠标跟踪判断扳机默认值\n        self.IfCanResize = True\n        self.setMouseTracking(True)  # 设置widget鼠标跟踪\n        # print(self.width(),self.height())\n        self.my_Qss()  # 美化",
        "detail": "lib.core.ui.newPanelWindow",
        "documentation": {}
    },
    {
        "label": "NbtTrewwThread",
        "kind": 6,
        "importPath": "lib.pure.nbtToStl",
        "description": "lib.pure.nbtToStl",
        "peekOfCode": "class NbtTrewwThread(QThread):   # 创建线程类\n    def __init__(self,File,TreeWidget):\n        super(NbtTrewwThread, self).__init__()\n        self.File = File\n        self.TreeWidget = TreeWidget\n    def run(self):     # 重写run()方法\n        TreePureNbtToStl(self.File, self.TreeWidget)\n#######################################################################\ndef deleteItem(TreeWidget):\n    try:",
        "detail": "lib.pure.nbtToStl",
        "documentation": {}
    },
    {
        "label": "deleteItem",
        "kind": 2,
        "importPath": "lib.pure.nbtToStl",
        "description": "lib.pure.nbtToStl",
        "peekOfCode": "def deleteItem(TreeWidget):\n    try:\n        # 尝试删除子节点（通过其父节点，调用removeChild函数进行删除）\n        currNode = TreeWidget.currentItem()\n        parent1 = currNode.parent()\n        parent1.removeChild(currNode)\n    except Exception:\n        # 遇到异常时删除根节点\n        try:\n            rootIndex = TreeWidget.indexOfTopLevelItem(currNode)",
        "detail": "lib.pure.nbtToStl",
        "documentation": {}
    },
    {
        "label": "TreePureNbtToStl",
        "kind": 2,
        "importPath": "lib.pure.nbtToStl",
        "description": "lib.pure.nbtToStl",
        "peekOfCode": "def TreePureNbtToStl(File,TreeWidget:QTreeWidget):\n    TreeWidget.clear()\n    nbt_file = nbtlib.load(File)\n    nbt_file = nbtlib.Compound(nbt_file)\n    tagParent = QTreeWidgetItem(TreeWidget)\n    tagParent.setText(0,File.split('//')[-1])\n    for item in nbt_file:\n        if str(type(nbt_file[item])) == \"<class 'nbtlib.tag.ByteArray'>\":\n            MakeTree(nbtlib.ByteArray(nbt_file[item]),tagParent,item)\n        else:",
        "detail": "lib.pure.nbtToStl",
        "documentation": {}
    },
    {
        "label": "MakeTree",
        "kind": 2,
        "importPath": "lib.pure.nbtToStl",
        "description": "lib.pure.nbtToStl",
        "peekOfCode": "def MakeTree(parent,parentWidget,name=''):\n    if str(type(parent)) == \"<class 'nbtlib.tag.String'>\":\n        tag = QTreeWidgetItem(parentWidget)\n        tag.setIcon(0,QIcon('./img/fileicon/str_1.png'))\n        tag.setText(0,name)\n        tag.setText(1,str(parent))\n    elif str(type(parent)) == \"<class 'nbtlib.tag.ByteArray'>\":\n        tagParent = QTreeWidgetItem(parentWidget)\n        tagParent.setIcon(0,QIcon('./img/fileicon/B_LIST_1.png'))\n        tagParent.setText(0,name+' ['+str(len(parent))+']')",
        "detail": "lib.pure.nbtToStl",
        "documentation": {}
    },
    {
        "label": "AttributePanel",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class AttributePanel(QFrame):\n    # 参数1：Name:str,参数2：Attribute:dict,参数3：ifopen:boolean,\n    def __init__(self, Name: str, AttributeDic: dict, funcList: list,ifopen: bool = False):\n        # ifopen默认为FALSE，就是展开\n        super().__init__()\n        # start\n        self.Name = Name\n        self.Attribute = AttributeDic\n        self.ifopen = ifopen\n        self.funcList = funcList",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "Ppath",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class Ppath:\n    def __init__(self,path):\n        self.path = path\n################################################################\nclass PQWidget(QWidget):\n    def __init__(self,parent_):\n        self.parent_ = parent_\n        super().__init__()\n    def mouseDoubleClickEvent(self, a0: QtGui.QMouseEvent) -> None:\n        if self.parent_.isMaximized():  # 缩小",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "PQWidget",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class PQWidget(QWidget):\n    def __init__(self,parent_):\n        self.parent_ = parent_\n        super().__init__()\n    def mouseDoubleClickEvent(self, a0: QtGui.QMouseEvent) -> None:\n        if self.parent_.isMaximized():  # 缩小\n            self.parent_.THIS_Widget.setContentsMargins(7, 7, 7, 7)\n            self.parent_.verticalLayout__.setContentsMargins(1, 1, 1, 1)\n            self.parent_.showNormal()  # 切换放大按钮图标\n            self.parent_.pushButton_2.setToolTip(",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "FlowLayout",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class FlowLayout(QLayout):\n    def __init__(self, parent=None, margin=-1, hspacing=-1, vspacing=-1):\n        super(FlowLayout, self).__init__(parent)\n        self._hspacing = hspacing\n        self._vspacing = vspacing\n        self._items = []\n        self.setContentsMargins(margin, margin, margin, margin)\n    def __del__(self):\n        del self._items[:]\n    def addItem(self, item):",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "FlowBox",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class FlowBox(QWidget):\n    def __init__(self,name,type):\n        super(FlowBox, self).__init__()\n        self.setContentsMargins(5, 5, 5, 5)\n        self.type = type\n        self.name = name\n        self.ThisLayout = QVBoxLayout(self)\n        self.setMaximumSize(50,64)\n        self.setMinimumSize(50,64)\n        self.ThisLayout.setContentsMargins(0,0,0,0)",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "FlowWidget",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class FlowWidget(QScrollArea):\n    def __init__(self, parent) -> None:\n        super().__init__()\n        self.setWidgetResizable(True)\n        self.ThisWidget = QWidget(self)\n        self.ThisLayout = FlowLayout(self.ThisWidget,hspacing=12, vspacing=12)\n        self.setWidget(self.ThisWidget)\n        self.setObjectName('AssetWidget')\n        #完成初始化控件部分\n        self.setStyleSheet('''",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "AssetWidget",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class AssetWidget(FlowWidget):\n    def __init__(self, parent,path,bottom) -> None:\n        super().__init__(parent)\n        self.path = path\n        self.parent = parent\n        self.FileList = []\n        self.DirList = []\n        self.AllList = []\n        self.fileCount = []\n        self.DirCount = []",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "Bubble",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class Bubble(QLabel):\n    def __init__(self, text):\n        super(Bubble, self).__init__(text)\n        self.word = text\n        self.setContentsMargins(5, 5, 5, 5)\n    def paintEvent(self, event):\n        painter = QPainter(self)\n        painter.setRenderHint(QPainter.Antialiasing, True)\n        painter.drawRoundedRect(\n            0, 0, self.width() - 1, self.height() - 1, 5, 5)",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "PpathWidget",
        "kind": 6,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "class PpathWidget(QScrollArea):\n    def __init__(self,path):\n        super().__init__()\n        self.initUI()\n        self.path = path\n        self.setRootPath(path)\n    def initUI(self):\n        self.ThisWidget = QWidget(self)\n        self.setWidgetResizable(True)\n        self.ThisLayout = QHBoxLayout(self.ThisWidget)",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 2,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "def print(*arg,SELF=None,widgetList=None):\n    # 首先，调用原始的print函数将内容打印到控制台。\n    #rewrite_print(*arg)\n    # 如果日志文件所在的目录不存在，则创建一个目录。\n    #output_dir = \"./log_file\"\n    # 打开（或创建）日志文件并将内容写入其中。\n    #log_name = 'log.txt'\n    #filename = os.path.join(output_dir, log_name)\n    rewrite_print(*arg,file=open(\"./log_file/log.txt\",\"a\"))\n    try:",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "clearLog",
        "kind": 2,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "def clearLog():\n    with open(\"./log_file/log.txt\",\"w\") as wf:\n        wf.write('')\n################################################################\ndef getLog():\n    with open(\"./log_file/log.txt\",\"r\") as rf:\n        getlogfile = rf.read()\n    return getlogfile\n#globals()['SELF'] = self\n################################################################",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "getLog",
        "kind": 2,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "def getLog():\n    with open(\"./log_file/log.txt\",\"r\") as rf:\n        getlogfile = rf.read()\n    return getlogfile\n#globals()['SELF'] = self\n################################################################\ndef GetDir(self,Lastpath,tabCount):#从Main里迁移出来\n    for file_name in os.listdir(Lastpath):\n        if os.path.isdir(Lastpath+'//'+file_name) == True:\n            #print(file_name)",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "GetDir",
        "kind": 2,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "def GetDir(self,Lastpath,tabCount):#从Main里迁移出来\n    for file_name in os.listdir(Lastpath):\n        if os.path.isdir(Lastpath+'//'+file_name) == True:\n            #print(file_name)\n            #is folder\n            #print(Lastpath+'\\\\'+file_name)\n            self.pathList.append(tabCount*'  '+file_name)\n            self.Projectfolders = self.Projectfolders + 1\n            GetDir(self,Lastpath+'\\\\'+file_name,tabCount = tabCount+1)\n        else:",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "get_file_path",
        "kind": 2,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "def get_file_path(root_path,file_list,dir_list):\n    #获取该目录下所有的文件名称和目录名称\n    dir_or_files = os.listdir(root_path)\n    for dir_file in dir_or_files:\n        #获取目录或者文件的路径\n        dir_file_path = os.path.join(root_path,dir_file)\n        #判断该路径为文件还是路径\n        if os.path.isdir(dir_file_path):\n            dir_list.append(dir_file_path)\n            #递归获取所有文件和目录的路径",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "get_ALL_file_count",
        "kind": 2,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "def get_ALL_file_count(root_path,file_list_count,dir_list_count):\n    #获取该目录下所有的文件名称和目录名称\n    dir_or_files = os.listdir(root_path)\n    for dir_file in dir_or_files:\n        #获取目录或者文件的路径\n        dir_file_path = os.path.join(root_path,dir_file)\n        #判断该路径为文件还是路径\n        if os.path.isdir(dir_file_path):\n            dir_list_count.append(dir_file_path)\n            #递归获取所有文件和目录的路径",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "rewrite_print",
        "kind": 5,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "rewrite_print = print\nprint_ = print\ndef print(*arg,SELF=None,widgetList=None):\n    # 首先，调用原始的print函数将内容打印到控制台。\n    #rewrite_print(*arg)\n    # 如果日志文件所在的目录不存在，则创建一个目录。\n    #output_dir = \"./log_file\"\n    # 打开（或创建）日志文件并将内容写入其中。\n    #log_name = 'log.txt'\n    #filename = os.path.join(output_dir, log_name)",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "print_",
        "kind": 5,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "print_ = print\ndef print(*arg,SELF=None,widgetList=None):\n    # 首先，调用原始的print函数将内容打印到控制台。\n    #rewrite_print(*arg)\n    # 如果日志文件所在的目录不存在，则创建一个目录。\n    #output_dir = \"./log_file\"\n    # 打开（或创建）日志文件并将内容写入其中。\n    #log_name = 'log.txt'\n    #filename = os.path.join(output_dir, log_name)\n    rewrite_print(*arg,file=open(\"./log_file/log.txt\",\"a\"))",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "#globals()['SELF']",
        "kind": 5,
        "importPath": "lib.base",
        "description": "lib.base",
        "peekOfCode": "#globals()['SELF'] = self\n################################################################\ndef GetDir(self,Lastpath,tabCount):#从Main里迁移出来\n    for file_name in os.listdir(Lastpath):\n        if os.path.isdir(Lastpath+'//'+file_name) == True:\n            #print(file_name)\n            #is folder\n            #print(Lastpath+'\\\\'+file_name)\n            self.pathList.append(tabCount*'  '+file_name)\n            self.Projectfolders = self.Projectfolders + 1",
        "detail": "lib.base",
        "documentation": {}
    },
    {
        "label": "CreateFileTree",
        "kind": 2,
        "importPath": "lib.fileTreeView",
        "description": "lib.fileTreeView",
        "peekOfCode": "def CreateFileTree(self):\n    #filetreeview\n    self.model = QDirModel()\n    #self.model.setRootPath(readConfig()['path']+'/'+readConfig()['name'])\n    self.fileTreeView = QTreeView()\n    self.fileTreeView.setModel(self.model)\n    self.fileTreeView.setAnimated(True)\n    self.fileTreeView.setIndentation(10)\n    self.fileTreeView.setRootIndex(self.model.index(readConfig()['path']+'/'+readConfig()['name']))\n    self.fileTreeView.setSortingEnabled(True)",
        "detail": "lib.fileTreeView",
        "documentation": {}
    },
    {
        "label": "MyWindow",
        "kind": 6,
        "importPath": "lib.newWindow",
        "description": "lib.newWindow",
        "peekOfCode": "class MyWindow(QWidget, Ui_Form):\n    def __init__(self, parent=None):\n        super(MyWindow, self).__init__(parent)\n        self.setupUi(self)\n        self._init_main_window()  # 主窗口初始化设置\n        self._initDrag()  # 设置鼠标跟踪判断扳机默认值\n        self.IfCanResize = True\n        self.setMouseTracking(True)  # 设置widget鼠标跟踪\n        # print(self.width(),self.height())\n        self.my_Qss()  # 美化",
        "detail": "lib.newWindow",
        "documentation": {}
    },
    {
        "label": "ProjectType",
        "kind": 5,
        "importPath": "lib.ProjectType",
        "description": "lib.ProjectType",
        "peekOfCode": "ProjectType = [\"mcfunction\",\n\"datapack\",\n\"3d file\",\n\"2d file\",\n\"viewer\",\n\"white project\"]\nProjectTypeTab = [\n    ['资源管理器',''],\n    [],\n    [],",
        "detail": "lib.ProjectType",
        "documentation": {}
    },
    {
        "label": "ProjectTypeTab",
        "kind": 5,
        "importPath": "lib.ProjectType",
        "description": "lib.ProjectType",
        "peekOfCode": "ProjectTypeTab = [\n    ['资源管理器',''],\n    [],\n    [],\n]",
        "detail": "lib.ProjectType",
        "documentation": {}
    },
    {
        "label": "readConfig",
        "kind": 2,
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "peekOfCode": "def readConfig():\n    with open('./config/config.json','r',encoding='utf-8') as f:\n        getConfig = f.read()\n    config =  eval(getConfig)\n    if config['path'] == '~/':\n        config['path'] = 'C:/'\n    tempList = []\n    for item in SummonTheProject:\n        tempList.append(item)\n    for i in range(len(SummonTheProject)):",
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "makeProject",
        "kind": 2,
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "peekOfCode": "def makeProject(self):\n    setting = readConfig()\n    VMFile = {}\n    Maindiv = ''\n    if setting['type'] == 'mcfunction':\n        Maindiv = 'Editor'\n    elif setting['type'] == 'datapack':\n        Maindiv = 'Editor'\n    elif setting['type'] == '3d':\n        Maindiv = 'Model'",
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "getFrist",
        "kind": 2,
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "peekOfCode": "def getFrist(dict):\n    tempList = []\n    for item in dict:\n        tempList.append(item)\n    return tempList[0]\ndef ReadDictFromVMfile(lastDict,path,name,self=None):\n    if type(lastDict) == type({}):#怪，为什么不能type == \"dict\"\n        print('folder-',name)\n        try:\n            os.makedirs(path+'/'+name)",
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "ReadDictFromVMfile",
        "kind": 2,
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "peekOfCode": "def ReadDictFromVMfile(lastDict,path,name,self=None):\n    if type(lastDict) == type({}):#怪，为什么不能type == \"dict\"\n        print('folder-',name)\n        try:\n            os.makedirs(path+'/'+name)\n        except:\n            QMessageBox.warning(self, \"warning\", \"项目 '\"+name+\"' 已存在。\", QMessageBox.Cancel)\n            return\n        for item in lastDict:\n            ReadDictFromVMfile(lastDict[item],path+'/'+name,item)",
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "SummonTheProject",
        "kind": 5,
        "importPath": "lib.readConfig",
        "description": "lib.readConfig",
        "peekOfCode": "SummonTheProject = {\"mcfunction\":[\"./img/func.png\",'.mcfunction,.txt,.*','yellow',1],\n                                 \"datapack\":[\"./img/pack.png\",'.mcsProject (.json,.mcfuntion,.nbt,.png...)','cadetblue',1],\n                                 \"3d file\":[\"./img/cb-be.png\",\".mcr,.mca,.nbt,.json(3d)\",\"skyblue\",1],\n                                 \"2d file\":[\"./img/func-be.png\",\".png,.jpg,.json(2d)\",\"orange\",1],\n                                 \"viewer\":[\"./img/dat.png\",\"some files viewer\",\"gray\",1],\n                                 \"white project\":[\"./img/white.png\",'the white project','lightgray',1]}\ndef readConfig():\n    with open('./config/config.json','r',encoding='utf-8') as f:\n        getConfig = f.read()\n    config =  eval(getConfig)",
        "detail": "lib.readConfig",
        "documentation": {}
    },
    {
        "label": "StyleReader",
        "kind": 6,
        "importPath": "lib.StyleReader",
        "description": "lib.StyleReader",
        "peekOfCode": "class StyleReader:\n    @staticmethod\n    def readQSS(style):\n        with open(style,'r',encoding='utf-8') as f:\n            return f.read()",
        "detail": "lib.StyleReader",
        "documentation": {}
    },
    {
        "label": "FlowLayout",
        "kind": 6,
        "importPath": "lib.test",
        "description": "lib.test",
        "peekOfCode": "class FlowLayout(QLayout):\n    def __init__(self, parent=None, margin=-1, hspacing=-1, vspacing=-1):\n        super(FlowLayout, self).__init__(parent)\n        self._hspacing = hspacing\n        self._vspacing = vspacing\n        self._items = []\n        self.setContentsMargins(margin, margin, margin, margin)\n    def __del__(self):\n        del self._items[:]\n    def addItem(self, item):",
        "detail": "lib.test",
        "documentation": {}
    },
    {
        "label": "Bubble",
        "kind": 6,
        "importPath": "lib.test",
        "description": "lib.test",
        "peekOfCode": "class Bubble(QLabel):\n    def __init__(self, text):\n        super(Bubble, self).__init__(text)\n        self.word = text\n        self.setContentsMargins(5, 5, 5, 5)\n    def paintEvent(self, event):\n        painter = QPainter(self)\n        painter.setRenderHint(QPainter.Antialiasing, True)\n        painter.drawRoundedRect(\n            0, 0, self.width() - 1, self.height() - 1, 5, 5)",
        "detail": "lib.test",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "lib.test",
        "description": "lib.test",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self, text, parent=None):\n        super(MainWindow, self).__init__(parent)\n        self.mainArea = QScrollArea(self)\n        self.mainArea.setWidgetResizable(True)\n        widget = QWidget(self.mainArea)\n        widget.setMinimumWidth(50)\n        layout = FlowLayout(widget)\n        self.words = []\n        for word in text.split():",
        "detail": "lib.test",
        "documentation": {}
    },
    {
        "label": "DemoTreeView",
        "kind": 6,
        "importPath": "lib.test2",
        "description": "lib.test2",
        "peekOfCode": "class DemoTreeView(QMainWindow):\n    def __init__(self, parent=None):\n        super(DemoTreeView, self).__init__(parent)   \n         # 设置窗口标题\n        self.setWindowTitle('实战PyQt5: QTreeView 演示')      \n        # 设置窗口大小\n        self.resize(520, 360)\n        self.initUi()\n    def initUi(self):\n        #设置表头信息",
        "detail": "lib.test2",
        "documentation": {}
    },
    {
        "label": "Ui_Form",
        "kind": 6,
        "importPath": "lib.ui",
        "description": "lib.ui",
        "peekOfCode": "class Ui_Form(object):\n    def setupUi(self, Form):\n        Form.setObjectName(\"Form\")\n        self.verticalLayout = QtWidgets.QVBoxLayout(Form)\n        self.THIS_Widget = QtWidgets.QFrame(Form)\n        self.THIS_Widget.setObjectName('THIS_Widget')\n        ##\n        self.verticalLayout.setContentsMargins(0, 0, 0, 0)\n        self.verticalLayout.setSpacing(0)\n        self.verticalLayout.setObjectName(\"verticalLayout\")",
        "detail": "lib.ui",
        "documentation": {}
    },
    {
        "label": "WindowMenu",
        "kind": 5,
        "importPath": "lib.WindowMenu",
        "description": "lib.WindowMenu",
        "peekOfCode": "WindowMenu = {\n    #base\n    \"Editor\":{\"icon\":\"./img/main_3/Editor.png\",\"Menu\":{\"select\":{'icon':'','function':'lib.core.function.Editor.select'}}},\n    \"Resource\":{\"icon\":\"./img/main_3/Resource.png\",\"Menu\":{}},\n    \"Attribute\":{\"icon\":\"./img/main_3/Attribute.png\",\"Menu\":{}},\n    \"Model\":{\"icon\":\"./img/main_3/Model.png\",\"Menu\":{}},\n    \"Painter\":{\"icon\":\"./img/main_3/Painter.png\",\"Menu\":{}},\n    \"Builtin\":{\"icon\":\"./img/main_3/White.png\",\"Menu\":{}},\n    \"White\":{\"icon\":\"./img/main_3/White.png\",\"Menu\":{}},\n    #more windows",
        "detail": "lib.WindowMenu",
        "documentation": {}
    },
    {
        "label": "WindowMenuInChoice",
        "kind": 5,
        "importPath": "lib.WindowMenu",
        "description": "lib.WindowMenu",
        "peekOfCode": "WindowMenuInChoice = {\n    'Standard':{   \"Editor\":{\"icon\":\"./img/main_3/Editor.png\",\"Menu\":{}},\n    \"Resource\":{\"icon\":\"./img/main_3/Resource.png\",\"Menu\":{}},\n    \"Attribute\":{\"icon\":\"./img/main_3/Attribute.png\",\"Menu\":{}},\n    \"Model\":{\"icon\":\"./img/main_3/Model.png\",\"Menu\":{}},\n    \"Painter\":{\"icon\":\"./img/main_3/Painter.png\",\"Menu\":{}},\n    \"Builtin\":{\"icon\":\"./img/main_3/Builtin.png\",\"Menu\":{}},\n    \"White\":{\"icon\":\"./img/main_3/White.png\",\"Menu\":{}},\n    },\n    #Convention",
        "detail": "lib.WindowMenu",
        "documentation": {}
    },
    {
        "label": "StarterInfo",
        "kind": 5,
        "importPath": "lib.WindowMenu",
        "description": "lib.WindowMenu",
        "peekOfCode": "StarterInfo = {\n    \"Editor\":{\"rightDIV\":{\"size\":40,\"Window\":'Editor',\"Children\":None,\"float\":\"left\"},\n        \"leftDIV\":{\"size\":10,\"Window\":None,\"Children\":{\n            \"LeftTopDiv\":{\"size\":10,\"Window\":\"Resource\",\"Children\":None,\"float\":\"top\"},\n            \"LeftBottomDiv\":{\"size\":10,\"Window\":\"Attribute\",\"Children\":None,\"float\":\"bottom\"},\n            },\"float\":\"right\"},\n        \"PROJECT_LIST\":['None']},\n    \"Model\":{\n        \"B\":{\"size\":10,\"Window\":None,\"Children\":{\n            \"LeftTopDiv\":{\"size\":10,\"Window\":\"Resource\",\"Children\":None,\"float\":\"top\"},",
        "detail": "lib.WindowMenu",
        "documentation": {}
    },
    {
        "label": "Traverse",
        "kind": 2,
        "importPath": "COUNT_LINE",
        "description": "COUNT_LINE",
        "peekOfCode": "def Traverse(dir):\n    global CountFile,CountLine\n    list=[]\n    for dirpath,dirnamesList,filenamesList in os.walk(dir):\n        for filename in filenamesList:\n            list.append(dirpath+\"\\\\\"+filename)\n            if filename.split(\".\")[-1] == 'py':\n                print(CountFile+1,filename,':')\n                CountFile = CountFile + 1\n                with open(dirpath+\"\\\\\"+filename,'r',encoding='utf8') as f:",
        "detail": "COUNT_LINE",
        "documentation": {}
    },
    {
        "label": "CountFile",
        "kind": 5,
        "importPath": "COUNT_LINE",
        "description": "COUNT_LINE",
        "peekOfCode": "CountFile = 0 \nCountLine = 0\ndef Traverse(dir):\n    global CountFile,CountLine\n    list=[]\n    for dirpath,dirnamesList,filenamesList in os.walk(dir):\n        for filename in filenamesList:\n            list.append(dirpath+\"\\\\\"+filename)\n            if filename.split(\".\")[-1] == 'py':\n                print(CountFile+1,filename,':')",
        "detail": "COUNT_LINE",
        "documentation": {}
    },
    {
        "label": "CountLine",
        "kind": 5,
        "importPath": "COUNT_LINE",
        "description": "COUNT_LINE",
        "peekOfCode": "CountLine = 0\ndef Traverse(dir):\n    global CountFile,CountLine\n    list=[]\n    for dirpath,dirnamesList,filenamesList in os.walk(dir):\n        for filename in filenamesList:\n            list.append(dirpath+\"\\\\\"+filename)\n            if filename.split(\".\")[-1] == 'py':\n                print(CountFile+1,filename,':')\n                CountFile = CountFile + 1",
        "detail": "COUNT_LINE",
        "documentation": {}
    },
    {
        "label": "PFrame",
        "kind": 6,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "class PFrame(QFrame):\n    #重写mousePressEvent事件\n    def mousePressEvent(self,evt) -> None:\n        global Window_self\n        #color line\n        ColorLine = self.findChild(QWidget,\"ColorLine_\"+self.objectName())\n        #print(ColorLine)\n        ColorLine.setStyleSheet('background:#4888FF;')\n        for OtherLine in ColorLineList:\n            if OtherLine != ColorLine:",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "NewEditor",
        "kind": 6,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "class NewEditor(MyWindow):\n    def __init__(self):\n        global Window_self\n        super().__init__()\n        Window_self = self\n        globals()['SELF'] = self\n        self.EditorList = []\n        self.Editorindex = 0\n        self.index = 0\n        self.panelWindowCount = 0",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "ColorLineList",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "ColorLineList = []\nWindowLineList = []\nOptionWidgetList = []\nWindow_self = None\nclass PFrame(QFrame):\n    #重写mousePressEvent事件\n    def mousePressEvent(self,evt) -> None:\n        global Window_self\n        #color line\n        ColorLine = self.findChild(QWidget,\"ColorLine_\"+self.objectName())",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "WindowLineList",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "WindowLineList = []\nOptionWidgetList = []\nWindow_self = None\nclass PFrame(QFrame):\n    #重写mousePressEvent事件\n    def mousePressEvent(self,evt) -> None:\n        global Window_self\n        #color line\n        ColorLine = self.findChild(QWidget,\"ColorLine_\"+self.objectName())\n        #print(ColorLine)",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "OptionWidgetList",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "OptionWidgetList = []\nWindow_self = None\nclass PFrame(QFrame):\n    #重写mousePressEvent事件\n    def mousePressEvent(self,evt) -> None:\n        global Window_self\n        #color line\n        ColorLine = self.findChild(QWidget,\"ColorLine_\"+self.objectName())\n        #print(ColorLine)\n        ColorLine.setStyleSheet('background:#4888FF;')",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "Window_self",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "Window_self = None\nclass PFrame(QFrame):\n    #重写mousePressEvent事件\n    def mousePressEvent(self,evt) -> None:\n        global Window_self\n        #color line\n        ColorLine = self.findChild(QWidget,\"ColorLine_\"+self.objectName())\n        #print(ColorLine)\n        ColorLine.setStyleSheet('background:#4888FF;')\n        for OtherLine in ColorLineList:",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "NewProjectWindow",
        "kind": 6,
        "importPath": "newProject",
        "description": "newProject",
        "peekOfCode": "class NewProjectWindow(MyWindow):#继承Qwidget\n    def __init__(self):\n        #init <- super\n        super().__init__()\n        globals()['SELF'] = self\n        self.initUI()#加载基础界面\n    def center(self):#居中_方法\n        ScreenWidth = QGuiApplication.primaryScreen().geometry().width()\n        ScreenHeight = QGuiApplication.primaryScreen().geometry().height()\n        self.move(int(ScreenWidth/2) - int(self.W/2), int(ScreenHeight/2) - int(self.H/2))",
        "detail": "newProject",
        "documentation": {}
    }
]